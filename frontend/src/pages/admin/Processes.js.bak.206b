import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { processesService } from '../../services/processesService';
import {
  MagnifyingGlassIcon,
  PlusIcon,
  EyeIcon,
  PencilIcon,
  EllipsisVerticalIcon,
  ClockIcon,
  ScaleIcon,
  UserIcon,
  FolderIcon,
  DocumentTextIcon,
  ExclamationTriangleIcon,
  FunnelIcon
} from '@heroicons/react/24/outline';

const Processes = () => {
  const [processes, setProcesses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [search, setSearch] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [advogadoFilter, setAdvogadoFilter] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalProcessos, setTotalProcessos] = useState(0);

  // Stats para o dashboard
  const [stats, setStats] = useState({
    total: 0,
    em_andamento: 0,
    aguardando: 0,
    valor_total: 0
  });

  const loadProcesses = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const params = {
        page: currentPage,
        per_page: 15,
        ...(search && { search }),
        ...(statusFilter && { status: statusFilter }),
        ...(advogadoFilter && { advogado_id: advogadoFilter })
      };

      console.log('üîÑ Carregando processos com params:', params);
      const response = await processesService.getProcesses(params);
      
      if (response && response.success) {
        // Garantir que sempre seja array
        const dataArray = Array.isArray(response.data) ? response.data : [];
        setProcesses(dataArray);
        setTotalProcessos(dataArray.length);
        
        // Calcular estat√≠sticas
        const newStats = {
          total: dataArray.length,
          em_andamento: dataArray.filter(p => p.status === 'em_andamento').length,
          aguardando: dataArray.filter(p => p.status === 'distribuido' || p.status === 'suspenso').length,
          valor_total: dataArray.reduce((sum, p) => sum + (parseFloat(p.valor_causa) || 0), 0)
        };
        setStats(newStats);
        
        // Pagina√ß√£o
        if (response.meta) {
          setTotalPages(response.meta.last_page || 1);
        }
        
        console.log('‚úÖ Processos carregados:', dataArray.length);
      } else {
        throw new Error(response?.message || 'Erro ao carregar processos');
      }
    } catch (err) {
      console.error('üí• Erro ao carregar processos:', err);
      setError('Erro ao carregar processos. Verifique sua conex√£o.');
      setProcesses([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadProcesses();
  }, [currentPage, search, statusFilter, advogadoFilter]);

  const handleSearch = (e) => {
    setSearch(e.target.value);
    setCurrentPage(1);
  };

  const handleStatusFilter = (status) => {
    setStatusFilter(status);
    setCurrentPage(1);
  };

  const handleAdvogadoFilter = (advogadoId) => {
    setAdvogadoFilter(advogadoId);
    setCurrentPage(1);
  };

  // Fun√ß√£o segura para extrair nome do cliente
  const getClientName = (processo) => {
    if (!processo) return 'Cliente n√£o informado';
    
    if (processo.cliente && typeof processo.cliente === 'object' && processo.cliente.nome) {
      return processo.cliente.nome;
    }
    
    return 'Cliente n√£o informado';
  };

  // Fun√ß√£o segura para extrair nome do advogado  
  const getAdvogadoName = (processo) => {
    if (!processo) return 'N√£o atribu√≠do';
    
    if (processo.advogado && typeof processo.advogado === 'object' && processo.advogado.name) {
      return processo.advogado.name;
    }
    
    return 'N√£o atribu√≠do';
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'em_andamento':
        return 'text-blue-600 bg-blue-100';
      case 'distribuido':
        return 'text-purple-600 bg-purple-100';
      case 'suspenso':
        return 'text-yellow-600 bg-yellow-100';
      case 'finalizado':
        return 'text-green-600 bg-green-100';
      case 'arquivado':
        return 'text-red-600 bg-red-100';
      default:
        return 'text-gray-600 bg-gray-100';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'em_andamento': return 'Em Andamento';
      case 'distribuido': return 'Distribu√≠do';
      case 'suspenso': return 'Suspenso';
      case 'finalizado': return 'Finalizado';
      case 'arquivado': return 'Arquivado';
      default: return status || 'Status n√£o informado';
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'urgente':
        return 'text-red-600 bg-red-100';
      case 'alta':
        return 'text-orange-600 bg-orange-100';
      case 'media':
        return 'text-yellow-600 bg-yellow-100';
      case 'baixa':
        return 'text-green-600 bg-green-100';
      default:
        return 'text-gray-600 bg-gray-100';
    }
  };

  const getPriorityText = (priority) => {
    switch (priority) {
      case 'urgente': return 'Urgente';
      case 'alta': return 'Alta';
      case 'media': return 'M√©dia';
      case 'baixa': return 'Baixa';
      default: return priority || 'M√©dia';
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    try {
      return new Date(dateString).toLocaleDateString('pt-BR');
    } catch (e) {
      return 'Data inv√°lida';
    }
  };

  const formatCurrency = (value) => {
    if (!value || value === null || value === undefined) return 'N/A';
    try {
      const numValue = typeof value === 'string' ? parseFloat(value) : value;
      return new Intl.NumberFormat('pt-BR', {
        style: 'currency',
        currency: 'BRL'
      }).format(numValue);
    } catch (e) {
      return 'R$ 0,00';
    }
  };

  // Garantir que processes √© sempre array
  const safeProcesses = Array.isArray(processes) ? processes : [];

  if (loading) {
    return (
      <div className="space-y-8">
        {/* Header Loading */}
        <div className="bg-white shadow-erlene rounded-xl border border-gray-100 p-6">
          <div className="animate-pulse">
            <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
            <div className="h-4 bg-gray-200 rounded w-1/2"></div>
          </div>
        </div>
        
        {/* Stats Loading */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {[...Array(4)].map((_, i) => (
            <div key={i} className="bg-white shadow-erlene rounded-xl border border-gray-100 p-6 animate-pulse">
              <div className="h-16 bg-gray-200 rounded mb-4"></div>
              <div className="h-4 bg-gray-200 rounded w-1/2"></div>
            </div>
          ))}
        </div>
        
        {/* Table Loading */}
        <div className="bg-white shadow-erlene rounded-xl border border-gray-100">
          <div className="p-6">
            <div className="animate-pulse space-y-4">
              {[...Array(5)].map((_, i) => (
                <div key={i} className="h-16 bg-gray-200 rounded"></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="space-y-8">
        <div className="bg-red-50 border border-red-200 rounded-xl p-6">
          <div className="flex items-center">
            <ExclamationTriangleIcon className="w-6 h-6 text-red-600 mr-3" />
            <div>
              <h3 className="text-lg font-medium text-red-900">Erro ao carregar processos</h3>
              <p className="text-red-700 mt-1">{error}</p>
            </div>
          </div>
          <div className="mt-4">
            <button
              onClick={loadProcesses}
              className="inline-flex items-center px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              Tentar novamente
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="bg-white shadow-erlene rounded-xl border border-gray-100 p-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Processos</h1>
            <p className="text-lg text-gray-600 mt-2">
              Gerencie todos os processos do escrit√≥rio
            </p>
          </div>
          <div className="flex items-center space-x-4">
            <Link
              to="/admin/processos/novo"
              className="inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
            >
              <PlusIcon className="w-4 h-4 mr-2" />
              Novo Processo
            </Link>
          </div>
        </div>
      </div>

      {/* Stats Dashboard */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {/* Total de Processos */}
        <div className="bg-white shadow-erlene rounded-xl border border-gray-100 p-6">
          <div className="flex items-center justify-between">
            <div>
              <div className="flex items-center justify-center w-12 h-12 bg-blue-100 rounded-xl mb-4">
                <ScaleIcon className="w-6 h-6 text-blue-600" />
              </div>
              <div className="text-2xl font-bold text-gray-900 mb-1">{stats.total}</div>
              <div className="text-sm text-gray-600">Total de Processos</div>
              <div className="text-xs text-gray-500 mt-1">Cadastrados no sistema</div>
            </div>
          </div>
        </div>

        {/* Em Andamento */}
        <div className="bg-white shadow-erlene rounded-xl border border-gray-100 p-6">
          <div className="flex items-center justify-between">
            <div>
              <div className="flex items-center justify-center w-12 h-12 bg-green-100 rounded-xl mb-4">
                <ClockIcon className="w-6 h-6 text-green-600" />
              </div>
              <div className="text-2xl font-bold text-gray-900 mb-1">{stats.em_andamento}</div>
              <div className="text-sm text-gray-600">Em Andamento</div>
              <div className="text-xs text-gray-500 mt-1">Processos ativos</div>
            </div>
          </div>
        </div>

        {/* Aguardando */}
        <div className="bg-white shadow-erlene rounded-xl border border-gray-100 p-6">
          <div className="flex items-center justify-between">
            <div>
              <div className="flex items-center justify-center w-12 h-12 bg-yellow-100 rounded-xl mb-4">
                <DocumentTextIcon className="w-6 h-6 text-yellow-600" />
              </div>
              <div className="text-2xl font-bold text-gray-900 mb-1">{stats.aguardando}</div>
              <div className="text-sm text-gray-600">Aguardando</div>
              <div className="text-xs text-gray-500 mt-1">Pendentes de a√ß√£o</div>
            </div>
          </div>
        </div>

        {/* Valor Total */}
        <div className="bg-white shadow-erlene rounded-xl border border-gray-100 p-6">
          <div className="flex items-center justify-between">
            <div>
              <div className="flex items-center justify-center w-12 h-12 bg-purple-100 rounded-xl mb-4">
                <UserIcon className="w-6 h-6 text-purple-600" />
              </div>
              <div className="text-2xl font-bold text-gray-900 mb-1">{formatCurrency(stats.valor_total)}</div>
              <div className="text-sm text-gray-600">Valor Total</div>
              <div className="text-xs text-gray-500 mt-1">Causa em tr√¢mite</div>
            </div>
          </div>
        </div>
      </div>

      {/* Lista de Processos */}
      <div className="bg-white shadow-erlene rounded-xl border border-gray-100">
        {/* Header da Lista */}
        <div className="px-6 py-4 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold text-gray-900">Lista de Processos</h3>
            <Link
              to="/admin/processos/novo"
              className="inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
            >
              <PlusIcon className="w-4 h-4 mr-2" />
              Novo Processo
            </Link>
          </div>
        </div>

        {/* Filtros */}
        <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {/* Busca */}
            <div className="relative">
              <MagnifyingGlassIcon className="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="text"
                placeholder="Buscar processo, cliente ou assunto..."
                value={search}
                onChange={handleSearch}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
              />
            </div>

            {/* Filtro Status */}
            <select
              value={statusFilter}
              onChange={(e) => handleStatusFilter(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
            >
              <option value="">Todos os status</option>
              <option value="em_andamento">Em Andamento</option>
              <option value="distribuido">Distribu√≠do</option>
              <option value="suspenso">Suspenso</option>
              <option value="finalizado">Finalizado</option>
              <option value="arquivado">Arquivado</option>
            </select>

            {/* Filtro Tipo */}
            <select className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500">
              <option value="">Todos os tipos</option>
              <option value="acao_cobranca">A√ß√£o de Cobran√ßa</option>
              <option value="reclamatoria_trabalhista">Reclamat√≥ria Trabalhista</option>
              <option value="execucao_fiscal">Execu√ß√£o Fiscal</option>
            </select>

            {/* Filtro Advogado */}
            <select
              value={advogadoFilter}
              onChange={(e) => handleAdvogadoFilter(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
            >
              <option value="">Todos os advogados</option>
              <option value="1">Dr. Carlos Oliveira</option>
              <option value="2">Dra. Maria Santos</option>
              <option value="3">Dra. Erlene Chaves Silva</option>
            </select>
          </div>
        </div>

        {/* Tabela */}
        {safeProcesses.length === 0 ? (
          <div className="text-center py-12">
            <DocumentTextIcon className="mx-auto h-12 w-12 text-gray-400" />
            <h3 className="mt-2 text-sm font-medium text-gray-900">Nenhum processo encontrado</h3>
            <p className="mt-1 text-sm text-gray-500">
              Comece criando um novo processo.
            </p>
            <div className="mt-6">
              <Link
                to="/admin/processos/novo"
                className="inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
              >
                <PlusIcon className="w-4 h-4 mr-2" />
                Novo Processo
              </Link>
            </div>
          </div>
        ) : (
          <div className="overflow-hidden">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Processo
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Cliente
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status/Tipo
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Advogado
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Valor
                    </th>
                    <th className="relative px-6 py-3">
                      <span className="sr-only">A√ß√µes</span>
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {safeProcesses.map((processo) => (
                    <tr key={processo?.id || Math.random()} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="flex items-center justify-center w-8 h-8 bg-primary-100 rounded-lg mr-3">
                            <ScaleIcon className="w-4 h-4 text-primary-600" />
                          </div>
                          <div>
                            <div className="text-sm font-medium text-gray-900">
                              {processo?.numero || 'N√∫mero n√£o informado'}
                            </div>
                            <div className="text-sm text-gray-500">
                              {processo?.tipo_acao || 'Tipo n√£o informado'}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900 font-medium">
                          {getClientName(processo)}
                        </div>
                        <div className="text-sm text-gray-500">
                          {processo?.cliente?.tipo_pessoa === 'PF' ? 'PF' : 'PJ'}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex flex-col space-y-1">
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(processo?.status)}`}>
                            {getStatusText(processo?.status)}
                          </span>
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getPriorityColor(processo?.prioridade)}`}>
                            {getPriorityText(processo?.prioridade)}
                          </span>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {getAdvogadoName(processo)}
                        </div>
                        <div className="text-sm text-gray-500">
                          {processo?.advogado?.oab || processo?.tribunal || 'OAB n√£o informada'}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {formatCurrency(processo?.valor_causa)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end space-x-2">
                          {/* √çCONE CLIENTE - Link direto para cliente */}
                          <Link
                            to={`/admin/clientes/${processo?.cliente_id || 0}`}
                            className="text-green-600 hover:text-green-900 p-1 rounded hover:bg-green-100 transition-colors"
                            title="Ver cliente"
                          >
                            <UserIcon className="w-4 h-4" />
                          </Link>
                          
                          {/* √çCONE DOCUMENTOS - Modal para documentos */}
                          <button
                            onClick={() => {
                              console.log('Abrir modal de documentos para processo:', processo?.id);
                              alert(`Funcionalidade de documentos ser√° implementada para o processo ${processo?.numero}`);
                            }}
                            className="text-blue-600 hover:text-blue-900 p-1 rounded hover:bg-blue-100 transition-colors"
                            title="Ver documentos"
                          >
                            <FolderIcon className="w-4 h-4" />
                          </button>

                          {/* Visualizar detalhes */}
                          <Link
                            to={`/admin/processos/${processo?.id || 0}`}
                            className="text-primary-600 hover:text-primary-900 p-1 rounded hover:bg-primary-100 transition-colors"
                            title="Visualizar detalhes"
                          >
                            <EyeIcon className="w-4 h-4" />
                          </Link>
                          
                          {/* Editar */}
                          <Link
                            to={`/admin/processos/${processo?.id || 0}/editar`}
                            className="text-blue-600 hover:text-blue-900 p-1 rounded hover:bg-blue-100 transition-colors"
                            title="Editar processo"
                          >
                            <PencilIcon className="w-4 h-4" />
                          </Link>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* Pagina√ß√£o */}
        {totalPages > 1 && (
          <div className="px-6 py-4 border-t border-gray-200 bg-gray-50">
            <div className="flex items-center justify-between">
              <div className="text-sm text-gray-700">
                Mostrando {safeProcesses.length} de {totalProcessos} processos
              </div>
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                  disabled={currentPage === 1}
                  className="px-3 py-1 border border-gray-300 text-sm rounded disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100"
                >
                  Anterior
                </button>
                <span className="px-3 py-1 text-sm text-gray-700">
                  P√°gina {currentPage} de {totalPages}
                </span>
                <button
                  onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                  disabled={currentPage === totalPages}
                  className="px-3 py-1 border border-gray-300 text-sm rounded disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100"
                >
                  Pr√≥xima
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Processes;
