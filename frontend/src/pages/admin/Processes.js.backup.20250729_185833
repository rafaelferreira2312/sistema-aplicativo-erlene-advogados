import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import {
  PlusIcon,
  MagnifyingGlassIcon,
  PencilIcon,
  TrashIcon,
  EyeIcon,
  ScaleIcon,
  ClockIcon,
  ArrowUpIcon,
  ArrowDownIcon,
  ExclamationTriangleIcon,
  CheckCircleIcon,
  XCircleIcon,
  PauseIcon
} from '@heroicons/react/24/outline';

const Processes = () => {
  const [processes, setProcesses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterCourt, setFilterCourt] = useState('all');
  const [filterClient, setFilterClient] = useState('all');

  // Mock data seguindo padr√£o do Dashboard
  const mockProcesses = [
    {
      id: 1,
      number: '1001234-56.2024.8.26.0001',
      client: 'Jo√£o Silva Santos',
      clientId: 1,
      court: 'TJSP - 1¬™ Vara C√≠vel',
      actionType: 'A√ß√£o de Indeniza√ß√£o',
      status: 'Em andamento',
      value: 50000.00,
      distributionDate: '2024-01-15',
      lawyer: 'Dr. Carlos Oliveira',
      priority: 'Normal',
      nextDeadline: '2024-03-15',
      createdAt: '2024-01-15'
    },
    {
      id: 2,
      number: '2002345-67.2024.8.26.0002',
      client: 'Empresa ABC Ltda',
      clientId: 2,
      court: 'TJSP - 2¬™ Vara Empresarial',
      actionType: 'A√ß√£o de Cobran√ßa',
      status: 'Urgente',
      value: 120000.00,
      distributionDate: '2024-01-20',
      lawyer: 'Dra. Maria Santos',
      priority: 'Alta',
      nextDeadline: '2024-02-20',
      createdAt: '2024-01-20'
    },
    {
      id: 3,
      number: '3003456-78.2024.8.26.0003',
      client: 'Maria Oliveira Costa',
      clientId: 3,
      court: 'TJSP - 3¬™ Vara Fam√≠lia',
      actionType: 'A√ß√£o de Div√≥rcio',
      status: 'Suspenso',
      value: 0.00,
      distributionDate: '2024-02-01',
      lawyer: 'Dr. Pedro Costa',
      priority: 'Baixa',
      nextDeadline: '2024-04-01',
      createdAt: '2024-02-01'
    },
    {
      id: 4,
      number: '4004567-89.2024.8.26.0004',
      client: 'Tech Solutions S.A.',
      clientId: 4,
      court: 'TJSP - 4¬™ Vara Empresarial',
      actionType: 'A√ß√£o Trabalhista',
      status: 'Conclu√≠do',
      value: 75000.00,
      distributionDate: '2024-02-10',
      lawyer: 'Dra. Ana Silva',
      priority: 'Normal',
      nextDeadline: null,
      createdAt: '2024-02-10'
    },
    {
      id: 5,
      number: '5005678-90.2024.8.26.0005',
      client: 'Jo√£o Silva Santos',
      clientId: 1,
      court: 'TJSP - 5¬™ Vara Criminal',
      actionType: 'A√ß√£o Penal',
      status: 'Em andamento',
      value: 0.00,
      distributionDate: '2024-02-15',
      lawyer: 'Dr. Carlos Oliveira',
      priority: 'Urgente',
      nextDeadline: '2024-03-01',
      createdAt: '2024-02-15'
    }
  ];

  useEffect(() => {
    // Simular carregamento seguindo padr√£o
    setTimeout(() => {
      setProcesses(mockProcesses);
      setLoading(false);
    }, 1000);
  }, []);

  // Calcular estat√≠sticas
  const stats = [
    {
      name: 'Total de Processos',
      value: processes.length.toString(),
      change: '+18%',
      changeType: 'increase',
      icon: ScaleIcon,
      color: 'blue',
      description: 'Cadastrados no sistema'
    },
    {
      name: 'Em Andamento',
      value: processes.filter(p => p.status === 'Em andamento').length.toString(),
      change: '+12%',
      changeType: 'increase',
      icon: ClockIcon,
      color: 'green',
      description: 'Processos ativos'
    },
    {
      name: 'Urgentes',
      value: processes.filter(p => p.status === 'Urgente').length.toString(),
      change: '+25%',
      changeType: 'increase',
      icon: ExclamationTriangleIcon,
      color: 'red',
      description: 'Requer aten√ß√£o imediata'
    },
    {
      name: 'Conclu√≠dos',
      value: processes.filter(p => p.status === 'Conclu√≠do').length.toString(),
      change: '+8%',
      changeType: 'increase',
      icon: CheckCircleIcon,
      color: 'purple',
      description: 'Finalizados este m√™s'
    }
  ];

  // Filtrar processos
  const filteredProcesses = processes.filter(process => {
    const matchesSearch = process.number.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         process.client.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         process.actionType.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = filterStatus === 'all' || process.status === filterStatus;
    const matchesCourt = filterCourt === 'all' || process.court.includes(filterCourt);
    const matchesClient = filterClient === 'all' || process.clientId.toString() === filterClient;
    
    return matchesSearch && matchesStatus && matchesCourt && matchesClient;
  });

  const handleDelete = (id) => {
    if (window.confirm('Tem certeza que deseja excluir este processo?')) {
      setProcesses(prev => prev.filter(process => process.id !== id));
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'Em andamento': return <ClockIcon className="w-4 h-4" />;
      case 'Urgente': return <ExclamationTriangleIcon className="w-4 h-4" />;
      case 'Suspenso': return <PauseIcon className="w-4 h-4" />;
      case 'Conclu√≠do': return <CheckCircleIcon className="w-4 h-4" />;
      default: return <ScaleIcon className="w-4 h-4" />;
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'Em andamento': return 'bg-blue-100 text-blue-800';
      case 'Urgente': return 'bg-red-100 text-red-800';
      case 'Suspenso': return 'bg-yellow-100 text-yellow-800';
      case 'Conclu√≠do': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'Urgente': return 'text-red-600';
      case 'Alta': return 'text-orange-600';
      case 'Normal': return 'text-blue-600';
      case 'Baixa': return 'text-gray-600';
      default: return 'text-gray-600';
    }
  };

  // A√ß√µes r√°pidas
  const quickActions = [
    { title: 'Novo Processo', icon: '‚öñÔ∏è', color: 'blue', href: '/admin/processos/novo' },
    { title: 'Audi√™ncias Hoje', icon: 'üìÖ', color: 'green', href: '/admin/audiencias' },
    { title: 'Prazos Vencendo', icon: '‚è∞', color: 'red', href: '/admin/prazos' },
    { title: 'Relat√≥rios', icon: 'üìä', color: 'purple', href: '/admin/relatorios/processos' }
  ];

  if (loading) {
    return (
      <div className="space-y-8">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2"></div>
        </div>
        <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
          {[...Array(4)].map((_, i) => (
            <div key={i} className="bg-white overflow-hidden shadow-erlene rounded-xl border border-gray-100 p-6 animate-pulse">
              <div className="h-12 bg-gray-200 rounded mb-4"></div>
              <div className="h-6 bg-gray-200 rounded mb-2"></div>
              <div className="h-4 bg-gray-200 rounded w-3/4"></div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* Header seguindo padr√£o Dashboard */}
      <div>
        <h1 className="text-3xl font-bold text-gray-900">Gest√£o de Processos</h1>
        <p className="mt-2 text-lg text-gray-600">
          Acompanhe todos os processos jur√≠dicos do escrit√≥rio
        </p>
      </div>

      {/* Stats Cards seguindo EXATO padr√£o Dashboard */}
      <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
        {stats.map((item) => (
          <div key={item.name} className="bg-white overflow-hidden shadow-erlene rounded-xl border border-gray-100">
            <div className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <div className={`p-3 rounded-lg bg-${item.color}-100`}>
                    <item.icon className={`h-6 w-6 text-${item.color}-600`} />
                  </div>
                </div>
                <div className={`flex items-center text-sm font-semibold ${
                  item.changeType === 'increase' ? 'text-green-600' : 'text-red-600'
                }`}>
                  {item.changeType === 'increase' ? (
                    <ArrowUpIcon className="h-4 w-4 mr-1" />
                  ) : (
                    <ArrowDownIcon className="h-4 w-4 mr-1" />
                  )}
                  {item.change}
                </div>
              </div>
              <div className="mt-4">
                <h3 className="text-sm font-medium text-gray-500">{item.name}</h3>
                <p className="text-3xl font-bold text-gray-900 mt-1">{item.value}</p>
                <p className="text-sm text-gray-500 mt-1">{item.description}</p>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* A√ß√µes R√°pidas */}
        <div className="lg:col-span-2">
          <div className="bg-white shadow-erlene rounded-xl border border-gray-100 p-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-semibold text-gray-900">A√ß√µes R√°pidas</h2>
              <EyeIcon className="h-5 w-5 text-gray-400" />
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {quickActions.map((action) => (
                <Link
                  key={action.title}
                  to={action.href}
                  className="group flex flex-col items-center p-6 border-2 border-dashed border-gray-300 rounded-xl hover:border-primary-500 hover:bg-primary-50 transition-all duration-200"
                >
                  <span className="text-3xl mb-3 group-hover:scale-110 transition-transform duration-200">
                    {action.icon}
                  </span>
                  <span className="text-sm font-medium text-gray-900 group-hover:text-primary-700">
                    {action.title}
                  </span>
                </Link>
              ))}
            </div>
          </div>
        </div>

        {/* Filtros R√°pidos */}
        <div>
          <div className="bg-white shadow-erlene rounded-xl border border-gray-100 p-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-semibold text-gray-900">Filtros R√°pidos</h2>
              <PlusIcon className="h-5 w-5 text-gray-400" />
            </div>
            <div className="space-y-4">
              <button className="w-full text-left p-3 rounded-lg hover:bg-gray-50 transition-colors">
                <div className="flex justify-between items-center">
                  <span className="font-medium text-gray-900">Em Andamento</span>
                  <span className="text-blue-600 font-semibold">
                    {processes.filter(p => p.status === 'Em andamento').length}
                  </span>
                </div>
              </button>
              <button className="w-full text-left p-3 rounded-lg hover:bg-gray-50 transition-colors">
                <div className="flex justify-between items-center">
                  <span className="font-medium text-gray-900">Urgentes</span>
                  <span className="text-red-600 font-semibold">
                    {processes.filter(p => p.status === 'Urgente').length}
                  </span>
                </div>
              </button>
              <button className="w-full text-left p-3 rounded-lg hover:bg-gray-50 transition-colors">
                <div className="flex justify-between items-center">
                  <span className="font-medium text-gray-900">Prazos Hoje</span>
                  <span className="text-orange-600 font-semibold">3</span>
                </div>
              </button>
              <button className="w-full text-left p-3 rounded-lg hover:bg-gray-50 transition-colors">
                <div className="flex justify-between items-center">
                  <span className="font-medium text-gray-900">Audi√™ncias</span>
                  <span className="text-purple-600 font-semibold">5</span>
                </div>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Lista de Processos */}
      <div className="bg-white shadow-erlene rounded-xl border border-gray-100 p-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-semibold text-gray-900">Lista de Processos</h2>
          <Link
            to="/admin/processos/novo"
            className="inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
          >
            <PlusIcon className="w-5 h-5 mr-2" />
            Novo Processo
          </Link>
        </div>
        
        <div className="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 mb-6">
          {/* Busca */}
          <div className="relative flex-1">
            <MagnifyingGlassIcon className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
            <input
              type="text"
              placeholder="Buscar processo, cliente ou tipo..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
            />
          </div>
          
          {/* Filtros */}
          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
          >
            <option value="all">Todos os status</option>
            <option value="Em andamento">Em andamento</option>
            <option value="Urgente">Urgente</option>
            <option value="Suspenso">Suspenso</option>
            <option value="Conclu√≠do">Conclu√≠do</option>
          </select>
          
          <select
            value={filterCourt}
            onChange={(e) => setFilterCourt(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
          >
            <option value="all">Todos os tribunais</option>
            <option value="TJSP">TJSP</option>
            <option value="TJRJ">TJRJ</option>
            <option value="STJ">STJ</option>
            <option value="TST">TST</option>
          </select>

          <select
            value={filterClient}
            onChange={(e) => setFilterClient(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
          >
            <option value="all">Todos os clientes</option>
            <option value="1">Jo√£o Silva Santos</option>
            <option value="2">Empresa ABC Ltda</option>
            <option value="3">Maria Oliveira Costa</option>
            <option value="4">Tech Solutions S.A.</option>
          </select>
        </div>

        {/* Tabela de Processos */}
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Processo
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Cliente
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Tribunal/Tipo
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Valor/Prazo
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Advogado
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  A√ß√µes
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredProcesses.map((process) => (
                <tr key={process.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="w-10 h-10 bg-primary-100 rounded-full flex items-center justify-center">
                        <ScaleIcon className="w-5 h-5 text-primary-600" />
                      </div>
                      <div className="ml-4">
                        <div className="text-sm font-medium text-gray-900">
                          {process.number}
                        </div>
                        <div className={`text-xs font-medium ${getPriorityColor(process.priority)}`}>
                          Prioridade: {process.priority}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900">{process.client}</div>
                    <div className="text-sm text-gray-500">ID: {process.clientId}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">{process.court}</div>
                    <div className="text-sm text-gray-500">{process.actionType}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex items-center px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(process.status)}`}>
                      {getStatusIcon(process.status)}
                      <span className="ml-1">{process.status}</span>
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">
                      {process.value > 0 ? `R$ ${process.value.toLocaleString('pt-BR')}` : 'Sem valor'}
                    </div>
                    <div className="text-sm text-gray-500">
                      {process.nextDeadline ? (
                        <span className="flex items-center">
                          <ClockIcon className="w-3 h-3 mr-1" />
                          {new Date(process.nextDeadline).toLocaleDateString('pt-BR')}
                        </span>
                      ) : (
                        'Sem prazo'
                      )}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">{process.lawyer}</div>
                    <div className="text-sm text-gray-500">
                      Dist: {new Date(process.distributionDate).toLocaleDateString('pt-BR')}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div className="flex justify-end space-x-2">
                      <button 
                        className="text-blue-600 hover:text-blue-900"
                        title="Visualizar"
                      >
                        <EyeIcon className="w-5 h-5" />
                      </button>
                      <Link
                        to={`/admin/processos/${process.id}/editar`}
                        className="text-primary-600 hover:text-primary-900"
                        title="Editar"
                      >
                        <PencilIcon className="w-5 h-5" />
                      </Link>
                      <button
                        onClick={() => handleDelete(process.id)}
                        className="text-red-600 hover:text-red-900"
                        title="Excluir"
                      >
                        <TrashIcon className="w-5 h-5" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        
        {/* Estado vazio */}
        {filteredProcesses.length === 0 && (
          <div className="text-center py-12">
            <ScaleIcon className="mx-auto h-12 w-12 text-gray-400" />
            <h3 className="mt-2 text-sm font-medium text-gray-900">Nenhum processo encontrado</h3>
            <p className="mt-1 text-sm text-gray-500">
              {searchTerm || filterStatus !== 'all' || filterCourt !== 'all' || filterClient !== 'all'
                ? 'Tente ajustar os filtros de busca.'
                : 'Comece cadastrando um novo processo.'}
            </p>
            <div className="mt-6">
              <Link
                to="/admin/processos/novo"
                className="inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
              >
                <PlusIcon className="w-5 h-5 mr-2" />
                Novo Processo
              </Link>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Processes;
