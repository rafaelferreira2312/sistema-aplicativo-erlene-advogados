import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import {
  PlusIcon,
  MagnifyingGlassIcon,
  PencilIcon,
  TrashIcon,
  EyeIcon,
  CalendarIcon,
  ClockIcon,
  MapPinIcon,
  UserIcon,
  ScaleIcon,
  ArrowUpIcon,
  ArrowDownIcon,
  ExclamationTriangleIcon,
  CheckCircleIcon,
  XCircleIcon
} from '@heroicons/react/24/outline';
import AudienciaTimelineModal from '../../components/audiencias/AudienciaTimelineModal';
import audienciasService from '../../services/audienciasService';

const Audiencias = () => {

  const formatarDataDaAPI = (dataString) => {
    if (!dataString) return "";
    // Se j√° est√° no formato correto (YYYY-MM-DD), usar diretamente
    if (dataString.length === 10 && dataString.includes("-")) {
      return dataString;
    }
    // Se est√° no formato ISO (com T), extrair apenas a data
    if (dataString.includes("T")) {
      return dataString.split("T")[0];
    }
    return dataString;
  };

  const [audiencias, setAudiencias] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterDate, setFilterDate] = useState('all');
  const [filterType, setFilterType] = useState('all');

  // Estados para modal de timeline
  const [selectedAudiencia, setSelectedAudiencia] = useState(null);
  const [showTimelineModal, setShowTimelineModal] = useState(false);

  // Estados para estat√≠sticas
  const [stats, setStats] = useState([
    {
      name: 'Audi√™ncias Hoje',
      value: '0',
      change: '+1',
      changeType: 'increase',
      icon: CalendarIcon,
      color: 'green',
      description: 'Agendadas para hoje'
    },
    {
      name: 'Pr√≥ximas 2h',
      value: '0',
      change: '0',
      changeType: 'neutral',
      icon: ClockIcon,
      color: 'yellow',
      description: 'Nas pr√≥ximas 2 horas'
    },
    {
      name: 'Em Andamento',
      value: '0',
      change: '0',
      changeType: 'neutral',
      icon: UserIcon,
      color: 'blue',
      description: 'Acontecendo agora'
    },
    {
      name: 'Total do M√™s',
      value: '0',
      change: '+25%',
      changeType: 'increase',
      icon: ScaleIcon,
      color: 'purple',
      description: 'Audi√™ncias este m√™s'
    }
  ]);

  useEffect(() => {
    carregarDados();
  }, []);

  const carregarDados = async () => {
    setLoading(true);
    
    try {
      console.log('üìÑ Carregando dados das audi√™ncias...');
      
      // Carregar estat√≠sticas
      const resultadoStats = await audienciasService.obterEstatisticas();
      if (resultadoStats.success) {
        setStats(prevStats => prevStats.map(stat => {
          switch (stat.name) {
            case 'Audi√™ncias Hoje':
              return { ...stat, value: resultadoStats.stats.hoje.toString() };
            case 'Pr√≥ximas 2h':
              return { ...stat, value: resultadoStats.stats.proximas_2h.toString() };
            case 'Em Andamento':
              return { ...stat, value: resultadoStats.stats.em_andamento.toString() };
            case 'Total do M√™s':
              return { ...stat, value: resultadoStats.stats.total_mes.toString() };
            default:
              return stat;
          }
        }));
        console.log('üìä Estat√≠sticas carregadas:', resultadoStats.stats);
      }

      // Carregar lista de audi√™ncias
      const resultadoLista = await audienciasService.listarAudiencias();
      if (resultadoLista.success) {
        // Converter dados da API para formato do frontend
        const audienciasFormatadas = resultadoLista.audiencias.map(audiencia => {
          // Extrair apenas a data (YYYY-MM-DD) do formato ISO completo
          let dataFormatada = audiencia.data;
          if (typeof dataFormatada === 'string' && dataFormatada.includes('T')) {
            dataFormatada = dataFormatada.split('T')[0];
          }
          
          // Extrair apenas HH:MM da hora se vier com segundos
          let horaFormatada = audiencia.hora;
          if (typeof horaFormatada === 'string' && horaFormatada.length > 5) {
            horaFormatada = horaFormatada.substring(0, 5);
          }
          
          return {
            id: audiencia.id,
            processo: audiencia.processo?.numero || `Processo #${audiencia.processo_id}`,
            cliente: audiencia.cliente?.nome || `Cliente #${audiencia.cliente_id}`,
            tipo: formatarTipo(audiencia.tipo),
            data: dataFormatada,
            hora: horaFormatada,
            local: audiencia.local,
            endereco: audiencia.endereco || '',
            sala: audiencia.sala || '',
            status: formatarStatus(audiencia.status),
            advogado: audiencia.advogado,
            juiz: audiencia.juiz || '',
            observacoes: audiencia.observacoes || '',
            createdAt: audiencia.created_at
          };
        });
        
        setAudiencias(audienciasFormatadas);
        console.log('üìã Audi√™ncias carregadas:', audienciasFormatadas);
      } else {
        console.error('Erro ao carregar audi√™ncias:', resultadoLista.error);
      }
      
    } catch (error) {
      console.error('Erro ao carregar dados:', error);
    } finally {
      setLoading(false);
    }
  };

  const formatarTipo = (tipo) => {
    const tipos = {
      'conciliacao': 'Audi√™ncia de Concilia√ß√£o',
      'instrucao': 'Audi√™ncia de Instru√ß√£o',
      'preliminar': 'Audi√™ncia Preliminar',
      'julgamento': 'Audi√™ncia de Julgamento',
      'outras': 'Outras'
    };
    return tipos[tipo] || tipo;
  };

  const formatarStatus = (status) => {
    const statusMap = {
      'agendada': 'Agendada',
      'confirmada': 'Confirmada',
      'em_andamento': 'Em andamento',
      'realizada': 'Conclu√≠da',
      'cancelada': 'Cancelada',
      'adiada': 'Adiada'
    };
    return statusMap[status] || status;
  };

  // Fun√ß√µes para modal de timeline
  const handleShowTimeline = (audiencia) => {
    setSelectedAudiencia(audiencia);
    setShowTimelineModal(true);
  };

  const closeTimelineModal = () => {
    setSelectedAudiencia(null);
    setShowTimelineModal(false);
  };

  // Filtrar audi√™ncias
  const filteredAudiencias = audiencias.filter(audiencia => {
    const matchesSearch = audiencia.processo.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         audiencia.cliente.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         audiencia.tipo.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         audiencia.local.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = filterStatus === 'all' || audiencia.status === filterStatus;
    const matchesType = filterType === 'all' || audiencia.tipo === filterType;
    
    // Filtro por data
    let matchesDate = true;
    const hoje = new Date().toISOString().split('T')[0];
    if (filterDate === 'hoje') {
      matchesDate = audiencia.data === hoje;
    } else if (filterDate === 'amanha') {
      const amanha = new Date();
      amanha.setDate(amanha.getDate() + 1);
      matchesDate = audiencia.data === amanha.toISOString().split('T')[0];
    } else if (filterDate === 'semana') {
      const dataAudiencia = new Date(audiencia.data);
      const inicioSemana = new Date();
      inicioSemana.setDate(inicioSemana.getDate() - inicioSemana.getDay());
      const fimSemana = new Date(inicioSemana);
      fimSemana.setDate(fimSemana.getDate() + 6);
      matchesDate = dataAudiencia >= inicioSemana && dataAudiencia <= fimSemana;
    }
    
    return matchesSearch && matchesStatus && matchesType && matchesDate;
  });

  const handleDelete = async (id) => {
    if (window.confirm('Tem certeza que deseja excluir esta audi√™ncia?')) {
      try {
        const resultado = await audienciasService.excluirAudiencia(id);
        if (resultado.success) {
          // Remover da lista local
          setAudiencias(prev => prev.filter(audiencia => audiencia.id !== id));
          // Recarregar estat√≠sticas
          carregarDados();
          alert('Audi√™ncia exclu√≠da com sucesso!');
        } else {
          alert('Erro ao excluir audi√™ncia: ' + resultado.error);
        }
      } catch (error) {
        console.error('Erro ao excluir:', error);
        alert('Erro ao excluir audi√™ncia');
      }
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'Agendada': return <CalendarIcon className="w-4 h-4" />;
      case 'Confirmada': return <CheckCircleIcon className="w-4 h-4" />;
      case 'Em andamento': return <ClockIcon className="w-4 h-4" />;
      case 'Conclu√≠da': return <CheckCircleIcon className="w-4 h-4" />;
      case 'Cancelada': return <XCircleIcon className="w-4 h-4" />;
      case 'Adiada': return <ExclamationTriangleIcon className="w-4 h-4" />;
      default: return <CalendarIcon className="w-4 h-4" />;
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'Agendada': return 'bg-blue-100 text-blue-800';
      case 'Confirmada': return 'bg-green-100 text-green-800';
      case 'Em andamento': return 'bg-yellow-100 text-yellow-800';
      case 'Conclu√≠da': return 'bg-gray-100 text-gray-800';
      case 'Cancelada': return 'bg-red-100 text-red-800';
      case 'Adiada': return 'bg-orange-100 text-orange-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    try {
      // Se vier no formato ISO, extrair apenas a data
      let cleanDate = dateString;
      if (typeof dateString === 'string' && dateString.includes('T')) {
        cleanDate = dateString.split('T')[0];
      }
      
      // Converter para Date e formatar
      const date = new Date(cleanDate + 'T00:00:00.000Z');
      return date.toLocaleDateString('pt-BR');
    } catch (e) {
      console.error('Erro ao formatar data:', dateString, e);
      return 'Data inv√°lida';
    }
  };

  const isToday = (dateString) => {
    if (!dateString) return false;
    try {
      // Extrair apenas a data se vier no formato ISO
      let cleanDate = dateString;
      if (typeof dateString === 'string' && dateString.includes('T')) {
        cleanDate = dateString.split('T')[0];
      }
      
      const hoje = new Date().toISOString().split('T')[0];
      return cleanDate === hoje;
    } catch (e) {
      return false;
    }
  };

  if (loading) {
    return (
      <div className="space-y-8">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2"></div>
        </div>
        <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
          {[...Array(4)].map((_, i) => (
            <div key={i} className="bg-white overflow-hidden shadow-erlene rounded-xl border border-gray-100 p-6 animate-pulse">
              <div className="h-12 bg-gray-200 rounded mb-4"></div>
              <div className="h-6 bg-gray-200 rounded mb-2"></div>
              <div className="h-4 bg-gray-200 rounded w-3/4"></div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  return (
    <>
      <div className="space-y-8">
        {/* Header seguindo padr√£o Dashboard */}
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Gest√£o de Audi√™ncias</h1>
          <p className="mt-2 text-lg text-gray-600">
            Gerencie todas as audi√™ncias do escrit√≥rio
          </p>
        </div>

        {/* Stats Cards seguindo EXATO padr√£o Dashboard */}
        <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
          {stats.map((item) => (
            <div key={item.name} className="bg-white overflow-hidden shadow-erlene rounded-xl border border-gray-100">
              <div className="p-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <div className={`p-3 rounded-lg bg-${item.color}-100`}>
                      <item.icon className={`h-6 w-6 text-${item.color}-600`} />
                    </div>
                  </div>
                  <div className={`flex items-center text-sm font-semibold ${
                    item.changeType === 'increase' ? 'text-green-600' : 
                    item.changeType === 'decrease' ? 'text-red-600' : 'text-gray-600'
                  }`}>
                    {item.changeType === 'increase' && <ArrowUpIcon className="h-4 w-4 mr-1" />}
                    {item.changeType === 'decrease' && <ArrowDownIcon className="h-4 w-4 mr-1" />}
                    {item.change}
                  </div>
                </div>
                <div className="mt-4">
                  <h3 className="text-sm font-medium text-gray-500">{item.name}</h3>
                  <p className="text-3xl font-bold text-gray-900 mt-1">{item.value}</p>
                  <p className="text-sm text-gray-500 mt-1">{item.description}</p>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Lista de Audi√™ncias */}
        <div className="bg-white shadow-erlene rounded-xl border border-gray-100 p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-semibold text-gray-900">Lista de Audi√™ncias</h2>
            <Link
              to="/admin/audiencias/nova"
              className="inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
            >
              <PlusIcon className="w-5 h-5 mr-2" />
              Nova Audi√™ncia
            </Link>
          </div>
          
          <div className="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 mb-6">
            {/* Busca */}
            <div className="relative flex-1">
              <MagnifyingGlassIcon className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
              <input
                type="text"
                placeholder="Buscar audi√™ncia, processo, cliente..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
              />
            </div>
            
            {/* Filtros */}
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
            >
              <option value="all">Todos os status</option>
              <option value="Agendada">Agendada</option>
              <option value="Confirmada">Confirmada</option>
              <option value="Em andamento">Em andamento</option>
              <option value="Conclu√≠da">Conclu√≠da</option>
              <option value="Cancelada">Cancelada</option>
              <option value="Adiada">Adiada</option>
            </select>
            
            <select
              value={filterDate}
              onChange={(e) => setFilterDate(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
            >
              <option value="all">Todas as datas</option>
              <option value="hoje">Hoje</option>
              <option value="amanha">Amanh√£</option>
              <option value="semana">Esta Semana</option>
            </select>
          </div>

          {/* Tabela de Audi√™ncias */}
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Data/Hora
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Processo/Cliente
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Tipo/Local
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Advogado
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    A√ß√µes
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredAudiencias.map((audiencia) => (
                  <tr key={audiencia.id} className={`hover:bg-gray-50 ${isToday(audiencia.data) ? 'bg-blue-50' : ''}`}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                          isToday(audiencia.data) ? 'bg-green-100' : 'bg-blue-100'
                        }`}>
                          <CalendarIcon className={`w-5 h-5 ${
                            isToday(audiencia.data) ? 'text-green-600' : 'text-blue-600'
                          }`} />
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-gray-900">
                            {formatDate(audiencia.data)}
                            {isToday(audiencia.data) && (
                              <span className="ml-2 inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
                                Hoje
                              </span>
                            )}
                          </div>
                          <div className="text-sm text-gray-500 flex items-center">
                            <ClockIcon className="w-3 h-3 mr-1" />
                            {audiencia.hora}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900 flex items-center">
                        <ScaleIcon className="w-4 h-4 mr-2 text-primary-600" />
                        {audiencia.processo}
                      </div>
                      <div className="text-sm text-gray-500">{audiencia.cliente}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{audiencia.tipo}</div>
                      <div className="text-sm text-gray-500 flex items-center">
                        <MapPinIcon className="w-3 h-3 mr-1" />
                        {audiencia.local}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex items-center px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(audiencia.status)}`}>
                        {getStatusIcon(audiencia.status)}
                        <span className="ml-1">{audiencia.status}</span>
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{audiencia.advogado}</div>
                      {audiencia.juiz && (
                        <div className="text-sm text-gray-500">Juiz: {audiencia.juiz}</div>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex justify-end space-x-2">
                        <button 
                          onClick={() => handleShowTimeline(audiencia)}
                          className="text-purple-600 hover:text-purple-900"
                          title="Ver Timeline"
                        >
                          <EyeIcon className="w-5 h-5" />
                        </button>
                        <Link
                          to={`/admin/audiencias/${audiencia.id}/editar`}
                          className="text-primary-600 hover:text-primary-900"
                          title="Editar"
                        >
                          <PencilIcon className="w-5 h-5" />
                        </Link>
                        <button
                          onClick={() => handleDelete(audiencia.id)}
                          className="text-red-600 hover:text-red-900"
                          title="Excluir"
                        >
                          <TrashIcon className="w-5 h-5" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          
          {/* Estado vazio */}
          {filteredAudiencias.length === 0 && (
            <div className="text-center py-12">
              <CalendarIcon className="mx-auto h-12 w-12 text-gray-400" />
              <h3 className="mt-2 text-sm font-medium text-gray-900">Nenhuma audi√™ncia encontrada</h3>
              <p className="mt-1 text-sm text-gray-500">
                {searchTerm || filterStatus !== 'all' || filterType !== 'all' || filterDate !== 'all'
                  ? 'Tente ajustar os filtros de busca.'
                  : 'Comece agendando uma nova audi√™ncia.'}
              </p>
              <div className="mt-6">
                <Link
                  to="/admin/audiencias/nova"
                  className="inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
                >
                  <PlusIcon className="w-5 h-5 mr-2" />
                  Nova Audi√™ncia
                </Link>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Modal de Timeline */}
      <AudienciaTimelineModal
        isOpen={showTimelineModal}
        onClose={closeTimelineModal}
        audiencia={selectedAudiencia}
      />
    </>
  );
};

export default Audiencias;
