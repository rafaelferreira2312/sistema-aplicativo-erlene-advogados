import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { processesService } from '../../services/processesService';
import { clientsService } from '../../services/clientsService';
import {
  ArrowLeftIcon,
  ScaleIcon,
  UserIcon,
  DocumentTextIcon,
  CurrencyDollarIcon,
  BuildingLibraryIcon,
  CalendarIcon,
  ClockIcon,
  ExclamationTriangleIcon,
  InformationCircleIcon
} from '@heroicons/react/24/outline';

const NewProcess = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [clients, setClients] = useState([]);
  const [advogados, setAdvogados] = useState([]);
  const [loadingData, setLoadingData] = useState(true);
  
  // TODOS os campos da tabela processos
  const [formData, setFormData] = useState({
    // CAMPOS OBRIGAT√ìRIOS (NOT NULL na tabela)
    numero: '',               // varchar(25) UNIQUE
    tribunal: '',             // varchar(255) NOT NULL
    cliente_id: '',           // FK OBRIGAT√ìRIA
    tipo_acao: '',            // varchar(255) NOT NULL
    data_distribuicao: '',    // date NOT NULL
    advogado_id: '',          // FK OBRIGAT√ìRIA
    
    // CAMPOS OPCIONAIS (NULL permitido)
    vara: '',                 // varchar(255) NULL
    valor_causa: '',          // decimal(15,2) NULL
    proximo_prazo: '',        // date NULL
    observacoes: '',          // text NULL
    
    // ENUMS com defaults
    status: 'distribuido',    // enum DEFAULT 'distribuido'
    prioridade: 'media'       // enum DEFAULT 'media'
  });

  const [errors, setErrors] = useState({});

  // Fun√ß√£o para converter moeda formatada para n√∫mero
  const currencyToNumber = (currencyString) => {
    if (!currencyString) return null;
    const numberStr = currencyString
      .replace(/R\$\s?/g, "")
      .replace(/\./g, "")
      .replace(/,/g, ".");
    const number = parseFloat(numberStr);
    return isNaN(number) ? null : number;
  };

  // Carregar dados necess√°rios
  useEffect(() => {
    const loadData = async () => {
      try {
        setLoadingData(true);
        
        // Carregar clientes usando dados reais
        try {
          const clientsResponse = await clientsService.getClients({ per_page: 100 });
          if (clientsResponse && clientsResponse.success) {
            const clientData = clientsResponse.data?.data || clientsResponse.data || [];
            setClients(Array.isArray(clientData) ? clientData : []);
            console.log('‚úÖ Clientes carregados:', clientData.length);
          } else {
            throw new Error('Resposta inv√°lida do servi√ßo de clientes');
          }
        } catch (clientError) {
          console.warn('‚ö†Ô∏è Erro ao carregar clientes, usando dados mock:', clientError);
          // Dados mock como fallback
          setClients([
            { id: 1, nome: 'Jo√£o Silva Santos', tipo_pessoa: 'PF', cpf_cnpj: '123.456.789-00' },
            { id: 2, nome: 'Empresa ABC Ltda', tipo_pessoa: 'PJ', cpf_cnpj: '12.345.678/0001-90' },
            { id: 3, nome: 'Maria Oliveira Costa', tipo_pessoa: 'PF', cpf_cnpj: '987.654.321-00' }
          ]);
        }

        // Carregar advogados (dados mock por enquanto - ser√° substitu√≠do por usersService)
        const mockAdvogados = [
          { id: 1, name: 'Dr. Carlos Oliveira', oab: 'OAB/SP 123456' },
          { id: 2, name: 'Dra. Maria Santos', oab: 'OAB/SP 234567' },
          { id: 3, name: 'Dr. Pedro Costa', oab: 'OAB/SP 345678' },
          { id: 4, name: 'Dra. Ana Silva', oab: 'OAB/SP 456789' },
          { id: 5, name: 'Dra. Erlene Chaves Silva', oab: 'OAB/SP 567890' }
        ];
        setAdvogados(mockAdvogados);
        console.log('‚úÖ Advogados carregados:', mockAdvogados.length);

      } catch (error) {
        console.error('üí• Erro ao carregar dados:', error);
        alert('Erro ao carregar dados iniciais. Verifique sua conex√£o.');
      } finally {
        setLoadingData(false);
      }
    };

    loadData();
  }, []);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
    
    // Limpar erro do campo
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  // Valida√ß√µes baseadas na estrutura real da tabela
  const validateForm = () => {
    const newErrors = {};
    
    // CAMPOS OBRIGAT√ìRIOS (NOT NULL na tabela)
    if (!formData.numero.trim()) newErrors.numero = 'N√∫mero do processo √© obrigat√≥rio';
    if (!formData.tribunal.trim()) newErrors.tribunal = 'Tribunal √© obrigat√≥rio';
    if (!formData.cliente_id) newErrors.cliente_id = 'Cliente √© obrigat√≥rio';
    if (!formData.tipo_acao.trim()) newErrors.tipo_acao = 'Tipo de a√ß√£o √© obrigat√≥rio';
    if (!formData.data_distribuicao) newErrors.data_distribuicao = 'Data de distribui√ß√£o √© obrigat√≥ria';
    if (!formData.advogado_id) newErrors.advogado_id = 'Advogado respons√°vel √© obrigat√≥rio';
    
    // Valida√ß√µes de formato
    if (formData.numero && formData.numero.length > 25) {
      newErrors.numero = 'N√∫mero do processo deve ter no m√°ximo 25 caracteres';
    }
    
    if (formData.valor_causa && isNaN(parseFloat(formData.valor_causa.replace(/[^\d,.-]/g, '').replace(',', '.')))) {
      newErrors.valor_causa = 'Valor da causa deve ser um n√∫mero v√°lido';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      console.log('‚ùå Formul√°rio inv√°lido:', errors);
      return;
    }
    
    setLoading(true);
    
    try {
      // Preparar dados para envio
      const submitData = {
        ...formData,
        // Converter valor_causa para n√∫mero se preenchido
        valor_causa: currencyToNumber(formData.valor_causa),
        // Garantir que IDs sejam n√∫meros
        cliente_id: parseInt(formData.cliente_id),
        advogado_id: parseInt(formData.advogado_id)
      };
      
      console.log('üì§ Enviando dados:', submitData);
      
      const response = await processesService.createProcess(submitData);
      
      if (response && response.success) {
        console.log('‚úÖ Processo criado com sucesso');
        alert('Processo cadastrado com sucesso!');
        navigate('/admin/processos');
      } else {
        console.error('‚ùå Erro na resposta:', response);
        alert(response?.message || 'Erro ao cadastrar processo');
      }
    } catch (error) {
      console.error('üí• Erro ao cadastrar processo:', error);
      alert('Erro ao cadastrar processo. Verifique sua conex√£o.');
    } finally {
      setLoading(false);
    }
  };

  const formatCurrency = (value) => {
    if (!value) return '';
    
    // Remove caracteres n√£o num√©ricos
    const numbers = value.replace(/\D/g, '');
    
    if (!numbers) return '';
    
    // Converte para n√∫mero com 2 casas decimais
    const amount = parseInt(numbers) / 100;
    
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(amount);
  };
  const handleCurrencyChange = (e) => {

  // Fun√ß√£o para converter moeda formatada para n√∫mero
    const formatted = formatCurrency(e.target.value);
    setFormData(prev => ({
      ...prev,
      valor_causa: formatted
    }));
  };

  const getSelectedClient = () => {
    return clients.find(c => c.id.toString() === formData.cliente_id.toString());
  };

  const getSelectedAdvogado = () => {
    return advogados.find(a => a.id.toString() === formData.advogado_id.toString());
  };

  const selectedClient = getSelectedClient();
  const selectedAdvogado = getSelectedAdvogado();

  if (loadingData) {
    return (
      <div className="space-y-8">
        <div className="bg-white shadow-erlene rounded-xl border border-gray-100 p-6">
          <div className="animate-pulse">
            <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
            <div className="h-4 bg-gray-200 rounded w-1/2"></div>
          </div>
        </div>
        <div className="bg-white rounded-xl p-6 animate-pulse">
          <div className="h-6 bg-gray-200 rounded mb-4 w-1/3"></div>
          <div className="grid grid-cols-2 gap-4">
            <div className="h-12 bg-gray-200 rounded"></div>
            <div className="h-12 bg-gray-200 rounded"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* Header seguindo padr√£o do sistema */}
      <div className="bg-white shadow-erlene rounded-xl border border-gray-100 p-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Link
              to="/admin/processos"
              className="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100 transition-colors"
            >
              <ArrowLeftIcon className="w-5 h-5" />
            </Link>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Novo Processo</h1>
              <p className="text-lg text-gray-600 mt-2">
                Cadastre um novo processo no sistema
              </p>
            </div>
          </div>
          <ScaleIcon className="w-12 h-12 text-primary-600" />
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-8">
        {/* Dados B√°sicos - Campos OBRIGAT√ìRIOS */}
        <div className="bg-white shadow-erlene rounded-xl border border-gray-100 p-6">
          <div className="flex items-center space-x-3 mb-6">
            <ExclamationTriangleIcon className="w-5 h-5 text-red-500" />
            <h2 className="text-xl font-semibold text-gray-900">Dados B√°sicos (Obrigat√≥rios)</h2>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* N√∫mero do Processo */}
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                N√∫mero do Processo *
              </label>
              <input
                type="text"
                name="numero"
                value={formData.numero}
                onChange={handleChange}
                maxLength="25"
                className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 ${
                  errors.numero ? 'border-red-300' : 'border-gray-300'
                }`}
                placeholder="0000000-00.0000.0.00.0000"
              />
              {errors.numero && <p className="text-red-500 text-sm mt-1">{errors.numero}</p>}
              <p className="text-xs text-gray-500 mt-1">Formato CNJ: 7 d√≠gitos-2 d√≠gitos.4 d√≠gitos.1 d√≠gito.2 d√≠gitos.4 d√≠gitos</p>
            </div>

            {/* Cliente */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Cliente *
              </label>
              <select
                name="cliente_id"
                value={formData.cliente_id}
                onChange={handleChange}
                className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 ${
                  errors.cliente_id ? 'border-red-300' : 'border-gray-300'
                }`}
              >
                <option value="">Selecione o cliente...</option>
                {clients.map((client) => (
                  <option key={client.id} value={client.id}>
                    {client.nome} ({client.tipo_pessoa}) - {client.cpf_cnpj}
                  </option>
                ))}
              </select>
              {errors.cliente_id && <p className="text-red-500 text-sm mt-1">{errors.cliente_id}</p>}
              
              {/* Preview do cliente */}
              {selectedClient && (
                <div className="mt-2 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <UserIcon className="w-4 h-4 text-blue-600" />
                    <div>
                      <div className="text-sm font-medium text-blue-900">{selectedClient.nome}</div>
                      <div className="text-xs text-blue-700">
                        {selectedClient.tipo_pessoa} - {selectedClient.cpf_cnpj}
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Advogado Respons√°vel */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Advogado Respons√°vel *
              </label>
              <select
                name="advogado_id"
                value={formData.advogado_id}
                onChange={handleChange}
                className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 ${
                  errors.advogado_id ? 'border-red-300' : 'border-gray-300'
                }`}
              >
                <option value="">Selecione o advogado...</option>
                {advogados.map((advogado) => (
                  <option key={advogado.id} value={advogado.id}>
                    {advogado.name} ({advogado.oab})
                  </option>
                ))}
              </select>
              {errors.advogado_id && <p className="text-red-500 text-sm mt-1">{errors.advogado_id}</p>}
              
              {/* Preview do advogado */}
              {selectedAdvogado && (
                <div className="mt-2 p-3 bg-green-50 border border-green-200 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <ScaleIcon className="w-4 h-4 text-green-600" />
                    <div>
                      <div className="text-sm font-medium text-green-900">{selectedAdvogado.name}</div>
                      <div className="text-xs text-green-700">{selectedAdvogado.oab}</div>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Tribunal */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Tribunal *
              </label>
              <select
                name="tribunal"
                value={formData.tribunal}
                onChange={handleChange}
                className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 ${
                  errors.tribunal ? 'border-red-300' : 'border-gray-300'
                }`}
              >
                <option value="">Selecione o tribunal...</option>
                <option value="TJSP">TJSP - Tribunal de Justi√ßa de S√£o Paulo</option>
                <option value="TJRJ">TJRJ - Tribunal de Justi√ßa do Rio de Janeiro</option>
                <option value="TJMG">TJMG - Tribunal de Justi√ßa de Minas Gerais</option>
                <option value="TRT02">TRT02 - Tribunal Regional do Trabalho 2¬™ Regi√£o</option>
                <option value="TRF03">TRF03 - Tribunal Regional Federal 3¬™ Regi√£o</option>
                <option value="STJ">STJ - Superior Tribunal de Justi√ßa</option>
                <option value="STF">STF - Supremo Tribunal Federal</option>
              </select>
              {errors.tribunal && <p className="text-red-500 text-sm mt-1">{errors.tribunal}</p>}
            </div>

            {/* Tipo de A√ß√£o */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Tipo de A√ß√£o *
              </label>
              <select
                name="tipo_acao"
                value={formData.tipo_acao}
                onChange={handleChange}
                className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 ${
                  errors.tipo_acao ? 'border-red-300' : 'border-gray-300'
                }`}
              >
                <option value="">Selecione o tipo de a√ß√£o...</option>
                <option value="A√ß√£o de Cobran√ßa">A√ß√£o de Cobran√ßa</option>
                <option value="A√ß√£o de Indeniza√ß√£o">A√ß√£o de Indeniza√ß√£o</option>
                <option value="A√ß√£o de Execu√ß√£o Fiscal">A√ß√£o de Execu√ß√£o Fiscal</option>
                <option value="Reclamat√≥ria Trabalhista">Reclamat√≥ria Trabalhista</option>
                <option value="A√ß√£o de Div√≥rcio">A√ß√£o de Div√≥rcio</option>
                <option value="A√ß√£o de Invent√°rio">A√ß√£o de Invent√°rio</option>
                <option value="Mandado de Seguran√ßa">Mandado de Seguran√ßa</option>
                <option value="A√ß√£o Consignat√≥ria">A√ß√£o Consignat√≥ria</option>
                <option value="A√ß√£o Anulat√≥ria">A√ß√£o Anulat√≥ria</option>
                <option value="Embargos de Terceiro">Embargos de Terceiro</option>
              </select>
              {errors.tipo_acao && <p className="text-red-500 text-sm mt-1">{errors.tipo_acao}</p>}
            </div>

            {/* Data de Distribui√ß√£o */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Data de Distribui√ß√£o *
              </label>
              <input
                type="date"
                name="data_distribuicao"
                value={formData.data_distribuicao}
                onChange={handleChange}
                className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 ${
                  errors.data_distribuicao ? 'border-red-300' : 'border-gray-300'
                }`}
              />
              {errors.data_distribuicao && <p className="text-red-500 text-sm mt-1">{errors.data_distribuicao}</p>}
            </div>
          </div>
        </div>

        {/* Campos Opcionais */}
        <div className="bg-white shadow-erlene rounded-xl border border-gray-100 p-6">
          <div className="flex items-center space-x-3 mb-6">
            <InformationCircleIcon className="w-5 h-5 text-blue-500" />
            <h2 className="text-xl font-semibold text-gray-900">Informa√ß√µes Complementares (Opcionais)</h2>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Vara */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Vara
              </label>
              <input
                type="text"
                name="vara"
                value={formData.vara}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
                placeholder="Ex: 1¬™ Vara C√≠vel, 2¬™ Vara Empresarial..."
              />
              <p className="text-xs text-gray-500 mt-1">Especifique a vara onde o processo tramita</p>
            </div>

            {/* Valor da Causa */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Valor da Causa
              </label>
              <input
                type="text"
                name="valor_causa"
                value={formData.valor_causa}
                onChange={handleCurrencyChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
                placeholder="R$ 0,00"
              />
              <p className="text-xs text-gray-500 mt-1">Valor monet√°rio da causa (opcional)</p>
            </div>

            {/* Pr√≥ximo Prazo */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Pr√≥ximo Prazo
              </label>
              <input
                type="date"
                name="proximo_prazo"
                value={formData.proximo_prazo}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
              />
              <p className="text-xs text-gray-500 mt-1">Data do pr√≥ximo prazo processual</p>
            </div>

            {/* Status */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Status
              </label>
              <select
                name="status"
                value={formData.status}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
              >
                <option value="distribuido">Distribu√≠do</option>
                <option value="em_andamento">Em Andamento</option>
                <option value="suspenso">Suspenso</option>
                <option value="arquivado">Arquivado</option>
                <option value="finalizado">Finalizado</option>
              </select>
            </div>

            {/* Prioridade */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Prioridade
              </label>
              <select
                name="prioridade"
                value={formData.prioridade}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
              >
                <option value="baixa">Baixa</option>
                <option value="media">M√©dia</option>
                <option value="alta">Alta</option>
                <option value="urgente">Urgente</option>
              </select>
            </div>

            {/* Observa√ß√µes */}
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Observa√ß√µes
              </label>
              <textarea
                name="observacoes"
                value={formData.observacoes}
                onChange={handleChange}
                rows={4}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
                placeholder="Observa√ß√µes adicionais sobre o processo..."
              />
              <p className="text-xs text-gray-500 mt-1">Informa√ß√µes complementares que julgar importantes</p>
            </div>
          </div>
        </div>

        {/* Resumo do Processo */}
        {(formData.numero || formData.cliente_id || formData.advogado_id) && (
          <div className="bg-blue-50 border border-blue-200 rounded-xl p-6">
            <h3 className="text-lg font-semibold text-blue-900 mb-4">Resumo do Processo</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <div className="text-sm font-medium text-blue-700">N√∫mero:</div>
                <div className="text-blue-900">{formData.numero || 'N√£o informado'}</div>
              </div>
              <div>
                <div className="text-sm font-medium text-blue-700">Cliente:</div>
                <div className="text-blue-900">{selectedClient?.nome || 'N√£o selecionado'}</div>
              </div>
              <div>
                <div className="text-sm font-medium text-blue-700">Advogado:</div>
                <div className="text-blue-900">{selectedAdvogado?.name || 'N√£o selecionado'}</div>
              </div>
              <div>
                <div className="text-sm font-medium text-blue-700">Tipo de A√ß√£o:</div>
                <div className="text-blue-900">{formData.tipo_acao || 'N√£o informado'}</div>
              </div>
              <div>
                <div className="text-sm font-medium text-blue-700">Tribunal:</div>
                <div className="text-blue-900">{formData.tribunal || 'N√£o selecionado'}</div>
              </div>
              <div>
                <div className="text-sm font-medium text-blue-700">Status:</div>
                <div className="text-blue-900">
                  <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                    formData.status === 'em_andamento' ? 'bg-blue-100 text-blue-800' :
                    formData.status === 'suspenso' ? 'bg-yellow-100 text-yellow-800' :
                    formData.status === 'finalizado' ? 'bg-green-100 text-green-800' :
                    formData.status === 'arquivado' ? 'bg-red-100 text-red-800' :
                    'bg-purple-100 text-purple-800'
                  }`}>
                    {formData.status === 'em_andamento' ? 'Em Andamento' :
                     formData.status === 'suspenso' ? 'Suspenso' :
                     formData.status === 'finalizado' ? 'Finalizado' :
                     formData.status === 'arquivado' ? 'Arquivado' :
                     'Distribu√≠do'}
                  </span>
                  <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ml-2 ${
                    formData.prioridade === 'urgente' ? 'bg-red-100 text-red-800' :
                    formData.prioridade === 'alta' ? 'bg-orange-100 text-orange-800' :
                    formData.prioridade === 'media' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-green-100 text-green-800'
                  }`}>
                    {formData.prioridade === 'urgente' ? 'Urgente' :
                     formData.prioridade === 'alta' ? 'Alta' :
                     formData.prioridade === 'media' ? 'M√©dia' :
                     'Baixa'}
                  </span>
                </div>
              </div>
              {formData.valor_causa && (
                <div>
                  <div className="text-sm font-medium text-blue-700">Valor da Causa:</div>
                  <div className="text-blue-900">{formData.valor_causa}</div>
                </div>
              )}
              {formData.data_distribuicao && (
                <div>
                  <div className="text-sm font-medium text-blue-700">Data de Distribui√ß√£o:</div>
                  <div className="text-blue-900">{new Date(formData.data_distribuicao).toLocaleDateString('pt-BR')}</div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Bot√µes de A√ß√£o */}
        <div className="bg-white shadow-erlene rounded-xl border border-gray-100 p-6">
          <div className="flex flex-col sm:flex-row justify-end space-y-4 sm:space-y-0 sm:space-x-4">
            <Link
              to="/admin/processos"
              className="inline-flex items-center justify-center px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium"
            >
              <ArrowLeftIcon className="w-4 h-4 mr-2" />
              Cancelar
            </Link>
            
            <button
              type="button"
              onClick={() => {
                if (validateForm()) {
                  alert('Formul√°rio v√°lido! Todos os campos obrigat√≥rios foram preenchidos.');
                } else {
                  alert('Por favor, preencha todos os campos obrigat√≥rios marcados com *');
                }
              }}
              className="inline-flex items-center justify-center px-6 py-3 border border-blue-300 text-blue-700 rounded-lg hover:bg-blue-50 transition-colors font-medium"
            >
              <DocumentTextIcon className="w-4 h-4 mr-2" />
              Validar Dados
            </button>
            
            <button
              type="submit"
              disabled={loading}
              className="inline-flex items-center justify-center px-8 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-medium"
            >
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Criando Processo...
                </>
              ) : (
                <>
                  <ScaleIcon className="w-4 h-4 mr-2" />
                  Criar Processo
                </>
              )}
            </button>
          </div>
          
          {/* Informa√ß√µes de ajuda */}
          <div className="mt-6 p-4 bg-gray-50 rounded-lg">
            <h4 className="text-sm font-medium text-gray-900 mb-2">Dicas para Cadastro:</h4>
            <ul className="text-xs text-gray-600 space-y-1">
              <li>‚Ä¢ Campos marcados com * s√£o obrigat√≥rios</li>
              <li>‚Ä¢ O n√∫mero do processo deve seguir o padr√£o CNJ</li>
              <li>‚Ä¢ Certifique-se de selecionar o cliente e advogado corretos</li>
              <li>‚Ä¢ O valor da causa √© formatado automaticamente em moeda brasileira</li>
              <li>‚Ä¢ Use o bot√£o "Validar Dados" para verificar se est√° tudo correto</li>
            </ul>
          </div>
        </div>
      </form>
    </div>
  );
};

export default NewProcess;
