// audienciasService.js - Service CORRIGIDO para integra√ß√£o real
// Sistema Erlene Advogados

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';

class AudienciasService {
  
  getAuthToken() {
    // Buscar token em v√°rias poss√≠veis chaves
    return localStorage.getItem('token') || 
           localStorage.getItem('erlene_token') || 
           localStorage.getItem('authToken') ||
           localStorage.getItem('access_token');
  }

  getHeaders() {
    const token = this.getAuthToken();
    return {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      ...(token && { 'Authorization': `Bearer ${token}` })
    };
  }

  async makeRequest(endpoint, options = {}) {
    try {
      const url = `${API_BASE_URL}${endpoint}`;
      const config = {
        headers: this.getHeaders(),
        ...options
      };

      console.log(`üîó API Request: ${url}`);
      
      const response = await fetch(url, config);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log(`‚úÖ API Response:`, data);
      
      return data;
    } catch (error) {
      console.error(`‚ùå API Error ${endpoint}:`, error);
      throw error;
    }
  }

  async listarAudiencias(filtros = {}) {
    try {
      const params = new URLSearchParams();
      
      if (filtros.status) params.append('status', filtros.status);
      if (filtros.tipo) params.append('tipo', filtros.tipo);
      if (filtros.data_inicio) params.append('data_inicio', filtros.data_inicio);
      if (filtros.data_fim) params.append('data_fim', filtros.data_fim);
      if (filtros.per_page) params.append('per_page', filtros.per_page);
      
      const queryString = params.toString();
      const endpoint = `/admin/audiencias${queryString ? `?${queryString}` : ''}`;
      
      const response = await this.makeRequest(endpoint, { method: 'GET' });
      
      return {
        success: true,
        audiencias: response.data || [],
        pagination: response.pagination || response.meta || {},
        total: response.pagination?.total || response.meta?.total || response.data?.length || 0
      };
    } catch (error) {
      console.error('‚ùå Erro ao listar audi√™ncias:', error);
      return {
        success: false,
        error: error.message,
        audiencias: [],
        pagination: {},
        total: 0
      };
    }
  }

  async obterEstatisticas() {
    try {
      const response = await this.makeRequest('/admin/audiencias/dashboard/stats', { 
        method: 'GET' 
      });
      
      return {
        success: true,
        stats: response.data || {
          hoje: 0,
          proximas_2h: 0,
          em_andamento: 0,
          total_mes: 0,
          agendadas: 0,
          realizadas_mes: 0
        }
      };
    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas:', error);
      return {
        success: false,
        error: error.message,
        stats: {
          hoje: 0,
          proximas_2h: 0,
          em_andamento: 0,
          total_mes: 0,
          agendadas: 0,
          realizadas_mes: 0
        }
      };
    }
  }

  async obterAudiencia(id) {
    try {
      const response = await this.makeRequest(`/admin/audiencias/${id}`, { 
        method: 'GET' 
      });
      
      return {
        success: true,
        audiencia: response.data || {}
      };
    } catch (error) {
      console.error(`‚ùå Erro ao obter audi√™ncia ${id}:`, error);
      return {
        success: false,
        error: error.message,
        audiencia: {}
      };
    }
  }

  async criarAudiencia(dadosAudiencia) {
    try {
      const response = await this.makeRequest('/admin/audiencias', {
        method: 'POST',
        body: JSON.stringify(dadosAudiencia)
      });
      
      return {
        success: true,
        audiencia: response.data || {},
        message: response.message || 'Audi√™ncia criada com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao criar audi√™ncia:', error);
      return {
        success: false,
        error: error.message,
        audiencia: {}
      };
    }
  }

  async atualizarAudiencia(id, dadosAudiencia) {
    try {
      const response = await this.makeRequest(`/admin/audiencias/${id}`, {
        method: 'PUT',
        body: JSON.stringify(dadosAudiencia)
      });
      
      return {
        success: true,
        audiencia: response.data || {},
        message: response.message || 'Audi√™ncia atualizada com sucesso'
      };
    } catch (error) {
      console.error(`‚ùå Erro ao atualizar audi√™ncia ${id}:`, error);
      return {
        success: false,
        error: error.message,
        audiencia: {}
      };
    }
  }

  async excluirAudiencia(id) {
    try {
      const response = await this.makeRequest(`/admin/audiencias/${id}`, {
        method: 'DELETE'
      });
      
      return {
        success: true,
        message: response.message || 'Audi√™ncia exclu√≠da com sucesso'
      };
    } catch (error) {
      console.error(`‚ùå Erro ao excluir audi√™ncia ${id}:`, error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // M√©todos auxiliares para compatibilidade
  async obterAudienciasHoje() {
    try {
      const response = await this.makeRequest('/admin/audiencias/filters/hoje', { 
        method: 'GET' 
      });
      
      return {
        success: true,
        audiencias: response.data || []
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
        audiencias: []
      };
    }
  }

  async obterProximasAudiencias(horas = 2) {
    try {
      const response = await this.makeRequest(
        `/admin/audiencias/filters/proximas?horas=${horas}`, 
        { method: 'GET' }
      );
      
      return {
        success: true,
        audiencias: response.data || []
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
        audiencias: []
      };
    }
  }

  // Valida√ß√£o e formata√ß√£o
  validarDadosAudiencia(dados) {
    const erros = [];

    if (!dados.processo_id && !dados.processoId) erros.push('Processo √© obrigat√≥rio');
    if (!dados.cliente_id && !dados.clienteId) erros.push('Cliente √© obrigat√≥rio');
    if (!dados.tipo) erros.push('Tipo de audi√™ncia √© obrigat√≥rio');
    if (!dados.data) erros.push('Data √© obrigat√≥ria');
    if (!dados.hora) erros.push('Hora √© obrigat√≥ria');
    if (!dados.local) erros.push('Local √© obrigat√≥rio');
    if (!dados.advogado) erros.push('Advogado respons√°vel √© obrigat√≥rio');

    return {
      valido: erros.length === 0,
      erros
    };
  }

  formatarDadosParaAPI(dados) {
    return {
      processo_id: parseInt(dados.processoId || dados.processo_id || 1),
      cliente_id: parseInt(dados.clienteId || dados.cliente_id || 1),
      advogado_id: parseInt(dados.advogadoId || dados.advogado_id || 1),
      unidade_id: parseInt(dados.unidadeId || dados.unidade_id || 1),
      tipo: dados.tipo || 'conciliacao',
      data: dados.data,
      hora: dados.hora,
      local: dados.local,
      endereco: dados.endereco || '',
      sala: dados.sala || '',
      advogado: dados.advogado,
      juiz: dados.juiz || '',
      status: dados.status || 'agendada',
      observacoes: dados.observacoes || '',
      lembrete: Boolean(dados.lembrete !== false),
      horas_lembrete: parseInt(dados.horasLembrete || dados.horas_lembrete || 2)
    };
  }
}

const audienciasService = new AudienciasService();
export default audienciasService;
