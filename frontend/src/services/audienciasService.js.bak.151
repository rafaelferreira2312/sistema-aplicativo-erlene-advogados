// audienciasService.js - Integrado com api.js (Sistema funcionando)
// Sistema Erlene Advogados - Módulo Audiências
// Usa o mesmo sistema de autenticação dos módulos funcionais

import apiInstance from './api';

class AudienciasService {
  constructor() {
    this.api = apiInstance;
  }

  // ====== MÉTODOS DE LISTAGEM ======
  
  async listarAudiencias() {
    try {
      const response = await this.api.apiRequest('/admin/audiencias');
      
      return {
        success: true,
        audiencias: response.data || response || [],
        message: 'Audiências carregadas com sucesso'
      };
    } catch (error) {
      console.error('❌ Erro ao listar audiências:', error);
      return {
        success: false,
        audiencias: [],
        error: error.message || 'Erro ao carregar audiências'
      };
    }
  }

  async obterAudiencia(id) {
    try {
      const response = await this.api.apiRequest(`/admin/audiencias/${id}`);
      
      return {
        success: true,
        audiencia: response.data || response,
        message: 'Audiência carregada com sucesso'
      };
    } catch (error) {
      console.error('❌ Erro ao obter audiência:', error);
      return {
        success: false,
        audiencia: null,
        error: error.message || 'Erro ao carregar audiência'
      };
    }
  }

  // ====== MÉTODOS DE CRIAÇÃO ======
  
  async criarAudiencia(dadosAudiencia) {
    try {
      const response = await this.api.apiRequest('/admin/audiencias', {
        method: 'POST',
        body: JSON.stringify(dadosAudiencia)
      });
      
      return {
        success: true,
        audiencia: response.data || response,
        message: response.message || 'Audiência criada com sucesso'
      };
    } catch (error) {
      console.error('❌ Erro ao criar audiência:', error);
      return {
        success: false,
        audiencia: null,
        error: error.message || 'Erro ao criar audiência'
      };
    }
  }

  // ====== MÉTODOS DE ATUALIZAÇÃO ======
  
  async atualizarAudiencia(id, dadosAudiencia) {
    try {
      const response = await this.api.apiRequest(`/admin/audiencias/${id}`, {
        method: 'PUT',
        body: JSON.stringify(dadosAudiencia)
      });
      
      return {
        success: true,
        audiencia: response.data || response,
        message: response.message || 'Audiência atualizada com sucesso'
      };
    } catch (error) {
      console.error('❌ Erro ao atualizar audiência:', error);
      return {
        success: false,
        audiencia: null,
        error: error.message || 'Erro ao atualizar audiência'
      };
    }
  }

  // ====== MÉTODOS DE EXCLUSÃO ======
  
  async excluirAudiencia(id) {
    try {
      const response = await this.api.apiRequest(`/admin/audiencias/${id}`, {
        method: 'DELETE'
      });
      
      return {
        success: true,
        message: response.message || 'Audiência excluída com sucesso'
      };
    } catch (error) {
      console.error('❌ Erro ao excluir audiência:', error);
      return {
        success: false,
        error: error.message || 'Erro ao excluir audiência'
      };
    }
  }

  // ====== MÉTODOS DE ESTATÍSTICAS ======
  
  async obterEstatisticas() {
    try {
      const response = await this.api.apiRequest('/admin/audiencias/dashboard/stats');
      
      return {
        success: true,
        stats: response.data || response,
        message: 'Estatísticas carregadas com sucesso'
      };
    } catch (error) {
      console.error('❌ Erro ao obter estatísticas:', error);
      return {
        success: false,
        stats: {
          hoje: 0,
          proximasSemana: 0,
          total: 0,
          realizadas: 0
        },
        error: error.message || 'Erro ao carregar estatísticas'
      };
    }
  }

  // ====== MÉTODOS DE FILTROS ======
  
  async obterAudienciasHoje() {
    try {
      const response = await this.api.apiRequest('/admin/audiencias/filters/hoje');
      
      return {
        success: true,
        audiencias: response.data || response || [],
        message: 'Audiências de hoje carregadas'
      };
    } catch (error) {
      console.error('❌ Erro ao obter audiências de hoje:', error);
      return {
        success: false,
        audiencias: [],
        error: error.message
      };
    }
  }

  async obterProximasAudiencias() {
    try {
      const response = await this.api.apiRequest('/admin/audiencias/filters/proximas');
      
      return {
        success: true,
        audiencias: response.data || response || [],
        message: 'Próximas audiências carregadas'
      };
    } catch (error) {
      console.error('❌ Erro ao obter próximas audiências:', error);
      return {
        success: false,
        audiencias: [],
        error: error.message
      };
    }
  }

  // ====== MÉTODOS DE VALIDAÇÃO E FORMATAÇÃO ======
  
  validarDadosAudiencia(dados) {
    const erros = [];
    
    if (!dados.processo_id) erros.push('Processo é obrigatório');
    if (!dados.cliente_id) erros.push('Cliente é obrigatório');
    if (!dados.tipo) erros.push('Tipo de audiência é obrigatório');
    if (!dados.data) erros.push('Data é obrigatória');
    if (!dados.hora) erros.push('Hora é obrigatória');
    if (!dados.local) erros.push('Local é obrigatório');
    if (!dados.advogado) erros.push('Advogado responsável é obrigatório');
    
    return {
      valido: erros.length === 0,
      erros
    };
  }
  
  formatarDadosParaAPI(dados) {
    return {
      processo_id: parseInt(dados.processoId || dados.processo_id),
      cliente_id: parseInt(dados.clienteId || dados.cliente_id),
      tipo: dados.tipo,
      data: dados.data,
      hora: dados.hora,
      local: dados.local,
      sala: dados.sala || '',
      endereco: dados.endereco || '',
      advogado: dados.advogado,
      juiz: dados.juiz || '',
      status: dados.status || 'agendada',
      observacoes: dados.observacoes || ''
    };
  }

  // ====== MÉTODOS DE FORMATAÇÃO PARA EXIBIÇÃO ======
  
  formatarDataHora(data, hora) {
    if (!data) return '';
    
    const dataObj = new Date(data + 'T' + (hora || '00:00'));
    return dataObj.toLocaleString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }
  
  formatarTipoAudiencia(tipo) {
    const tipos = {
      'conciliacao': 'Conciliação',
      'instrucao': 'Instrução',
      'julgamento': 'Julgamento',
      'inicial': 'Audiência Inicial',
      'una': 'Audiência Una',
      'virtual': 'Virtual',
      'presencial': 'Presencial'
    };
    
    return tipos[tipo] || tipo;
  }
  
  formatarStatusAudiencia(status) {
    const statusMap = {
      'agendada': { label: 'Agendada', class: 'bg-blue-100 text-blue-800' },
      'confirmada': { label: 'Confirmada', class: 'bg-green-100 text-green-800' },
      'realizada': { label: 'Realizada', class: 'bg-gray-100 text-gray-800' },
      'cancelada': { label: 'Cancelada', class: 'bg-red-100 text-red-800' },
      'adiada': { label: 'Adiada', class: 'bg-yellow-100 text-yellow-800' }
    };
    
    return statusMap[status] || { label: status, class: 'bg-gray-100 text-gray-800' };
  }

  // ====== MÉTODOS DE UTILIDADE ======
  
  obterCorPorTipo(tipo) {
    const cores = {
      'conciliacao': 'bg-blue-500',
      'instrucao': 'bg-green-500',
      'julgamento': 'bg-red-500',
      'inicial': 'bg-purple-500',
      'una': 'bg-yellow-500',
      'virtual': 'bg-indigo-500',
      'presencial': 'bg-pink-500'
    };
    
    return cores[tipo] || 'bg-gray-500';
  }
  
  calcularTempoRestante(data, hora) {
    if (!data || !hora) return null;
    
    const agora = new Date();
    const dataAudiencia = new Date(data + 'T' + hora);
    const diff = dataAudiencia.getTime() - agora.getTime();
    
    if (diff < 0) return 'Expirado';
    
    const dias = Math.floor(diff / (1000 * 60 * 60 * 24));
    const horas = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    
    if (dias > 0) return `${dias} dia(s)`;
    if (horas > 0) return `${horas} hora(s)`;
    
    return 'Hoje';
  }
}

// Exportar instância única
export default new AudienciasService();
