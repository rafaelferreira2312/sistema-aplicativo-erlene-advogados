// audienciasService.js - Vers√£o corrigida que funciona
// Sistema Erlene Advogados - M√≥dulo Audi√™ncias
// Integra√ß√£o direta com fetch API (como m√≥dulos funcionais)

class AudienciasService {
  constructor() {
    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';
  }

  // M√©todo para obter token de autentica√ß√£o
  getAuthToken() {
    return localStorage.getItem('token') || 
           localStorage.getItem('erlene_token') || 
           localStorage.getItem('authToken') ||
           localStorage.getItem('access_token');
  }

  // M√©todo para fazer requisi√ß√µes HTTP
  async makeRequest(endpoint, options = {}) {
    const token = this.getAuthToken();
    const url = `${this.baseURL}${endpoint}`;
    
    const config = {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        ...(token && { 'Authorization': `Bearer ${token}` }),
        ...(options.headers || {})
      },
      ...options
    };

    console.log(`üîó API Request: ${url}`, { method: config.method, hasToken: !!token });

    try {
      const response = await fetch(url, config);
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }
      
      const data = await response.json();
      console.log(`‚úÖ API Response: ${url}`, data);
      return data;
      
    } catch (error) {
      console.error(`‚ùå API Error: ${url}`, error);
      throw error;
    }
  }

  // ====== M√âTODOS DE LISTAGEM ======
  
  async listarAudiencias() {
    try {
      const response = await this.makeRequest('/admin/audiencias');
      
      return {
        success: true,
        audiencias: response.data || response || [],
        pagination: response.pagination || null,
        message: 'Audi√™ncias carregadas com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao listar audi√™ncias:', error);
      return {
        success: false,
        audiencias: [],
        error: error.message || 'Erro ao carregar audi√™ncias'
      };
    }
  }

  async obterAudiencia(id) {
    try {
      const response = await this.makeRequest(`/admin/audiencias/${id}`);
      
      return {
        success: true,
        audiencia: response.data || response,
        message: 'Audi√™ncia carregada com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao obter audi√™ncia:', error);
      return {
        success: false,
        audiencia: null,
        error: error.message || 'Erro ao carregar audi√™ncia'
      };
    }
  }

  // ====== M√âTODOS DE CRIA√á√ÉO ======
  
  async criarAudiencia(dadosAudiencia) {
    try {
      const response = await this.makeRequest('/admin/audiencias', {
        method: 'POST',
        body: JSON.stringify(dadosAudiencia)
      });
      
      return {
        success: true,
        audiencia: response.data || response,
        message: response.message || 'Audi√™ncia criada com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao criar audi√™ncia:', error);
      return {
        success: false,
        audiencia: null,
        error: error.message || 'Erro ao criar audi√™ncia',
        errors: error.errors || null
      };
    }
  }

  // ====== M√âTODOS DE ATUALIZA√á√ÉO ======
  
  async atualizarAudiencia(id, dadosAudiencia) {
    try {
      const response = await this.makeRequest(`/admin/audiencias/${id}`, {
        method: 'PUT',
        body: JSON.stringify(dadosAudiencia)
      });
      
      return {
        success: true,
        audiencia: response.data || response,
        message: response.message || 'Audi√™ncia atualizada com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao atualizar audi√™ncia:', error);
      return {
        success: false,
        audiencia: null,
        error: error.message || 'Erro ao atualizar audi√™ncia',
        errors: error.errors || null
      };
    }
  }

  // ====== M√âTODOS DE EXCLUS√ÉO ======
  
  async excluirAudiencia(id) {
    try {
      const response = await this.makeRequest(`/admin/audiencias/${id}`, {
        method: 'DELETE'
      });
      
      return {
        success: true,
        message: response.message || 'Audi√™ncia exclu√≠da com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao excluir audi√™ncia:', error);
      return {
        success: false,
        error: error.message || 'Erro ao excluir audi√™ncia'
      };
    }
  }

  // ====== M√âTODOS DE ESTAT√çSTICAS ======
  
  async obterEstatisticas() {
    try {
      const response = await this.makeRequest('/admin/audiencias/dashboard/stats');
      
      return {
        success: true,
        stats: response.data || response,
        message: 'Estat√≠sticas carregadas com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas:', error);
      return {
        success: false,
        stats: {
          hoje: 0,
          proximas_2h: 0,
          em_andamento: 0,
          total_mes: 0,
          agendadas: 0,
          realizadas_mes: 0
        },
        error: error.message || 'Erro ao carregar estat√≠sticas'
      };
    }
  }

  // ====== M√âTODOS DE FILTROS ======
  
  async obterAudienciasHoje() {
    try {
      const response = await this.makeRequest('/admin/audiencias/filters/hoje');
      
      return {
        success: true,
        audiencias: response.data || response || [],
        message: 'Audi√™ncias de hoje carregadas'
      };
    } catch (error) {
      console.error('‚ùå Erro ao obter audi√™ncias de hoje:', error);
      return {
        success: false,
        audiencias: [],
        error: error.message
      };
    }
  }

  async obterProximasAudiencias() {
    try {
      const response = await this.makeRequest('/admin/audiencias/filters/proximas');
      
      return {
        success: true,
        audiencias: response.data || response || [],
        message: 'Pr√≥ximas audi√™ncias carregadas'
      };
    } catch (error) {
      console.error('‚ùå Erro ao obter pr√≥ximas audi√™ncias:', error);
      return {
        success: false,
        audiencias: [],
        error: error.message
      };
    }
  }

  // ====== M√âTODOS DE VALIDA√á√ÉO E FORMATA√á√ÉO ======
  
  validarDadosAudiencia(dados) {
    const erros = [];
    
    if (!dados.processo_id && !dados.processoId) erros.push('Processo √© obrigat√≥rio');
    if (!dados.cliente_id && !dados.clienteId) erros.push('Cliente √© obrigat√≥rio');
    if (!dados.tipo) erros.push('Tipo de audi√™ncia √© obrigat√≥rio');
    if (!dados.data) erros.push('Data √© obrigat√≥ria');
    if (!dados.hora) erros.push('Hora √© obrigat√≥ria');
    if (!dados.local) erros.push('Local √© obrigat√≥rio');
    if (!dados.advogado) erros.push('Advogado respons√°vel √© obrigat√≥rio');
    
    return {
      valido: erros.length === 0,
      erros
    };
  }
  
  formatarDadosParaAPI(dados) {
    return {
      processo_id: parseInt(dados.processoId || dados.processo_id),
      cliente_id: parseInt(dados.clienteId || dados.cliente_id),
      advogado_id: parseInt(dados.advogadoId || dados.advogado_id || 1),
      tipo: dados.tipo,
      data: dados.data,
      hora: dados.hora,
      local: dados.local,
      endereco: dados.endereco || '',
      sala: dados.sala || '',
      advogado: dados.advogado,
      juiz: dados.juiz || '',
      status: dados.status || 'agendada',
      observacoes: dados.observacoes || '',
      lembrete: dados.lembrete !== undefined ? dados.lembrete : true,
      horas_lembrete: parseInt(dados.horasLembrete || dados.horas_lembrete || 2)
    };
  }

  // ====== M√âTODOS DE FORMATA√á√ÉO PARA EXIBI√á√ÉO ======
  
  formatarDataHora(data, hora) {
    if (!data) return '';
    
    try {
      const dataObj = new Date(data + 'T' + (hora || '00:00'));
      return dataObj.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch (e) {
      return 'Data inv√°lida';
    }
  }
  
  formatarTipoAudiencia(tipo) {
    const tipos = {
      'conciliacao': 'Concilia√ß√£o',
      'instrucao': 'Instru√ß√£o',
      'julgamento': 'Julgamento',
      'inicial': 'Audi√™ncia Inicial',
      'una': 'Audi√™ncia Una',
      'virtual': 'Virtual',
      'presencial': 'Presencial',
      'preliminar': 'Preliminar'
    };
    
    return tipos[tipo] || tipo;
  }
  
  formatarStatusAudiencia(status) {
    const statusMap = {
      'agendada': { label: 'Agendada', class: 'bg-blue-100 text-blue-800' },
      'confirmada': { label: 'Confirmada', class: 'bg-green-100 text-green-800' },
      'em_andamento': { label: 'Em andamento', class: 'bg-yellow-100 text-yellow-800' },
      'realizada': { label: 'Realizada', class: 'bg-gray-100 text-gray-800' },
      'cancelada': { label: 'Cancelada', class: 'bg-red-100 text-red-800' },
      'adiada': { label: 'Adiada', class: 'bg-orange-100 text-orange-800' }
    };
    
    return statusMap[status] || { label: status, class: 'bg-gray-100 text-gray-800' };
  }

  // ====== M√âTODOS DE UTILIDADE ======
  
  obterCorPorTipo(tipo) {
    const cores = {
      'conciliacao': 'bg-blue-500',
      'instrucao': 'bg-green-500',
      'julgamento': 'bg-red-500',
      'inicial': 'bg-purple-500',
      'una': 'bg-yellow-500',
      'virtual': 'bg-indigo-500',
      'presencial': 'bg-pink-500',
      'preliminar': 'bg-teal-500'
    };
    
    return cores[tipo] || 'bg-gray-500';
  }
  
  calcularTempoRestante(data, hora) {
    if (!data || !hora) return null;
    
    try {
      const agora = new Date();
      const dataAudiencia = new Date(data + 'T' + hora);
      const diff = dataAudiencia.getTime() - agora.getTime();
      
      if (diff < 0) return 'Expirado';
      
      const dias = Math.floor(diff / (1000 * 60 * 60 * 24));
      const horas = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      
      if (dias > 0) return `${dias} dia(s)`;
      if (horas > 0) return `${horas} hora(s)`;
      
      return 'Hoje';
    } catch (e) {
      return null;
    }
  }
}

// Exportar inst√¢ncia √∫nica
export default new AudienciasService();
