#!/bin/bash

# Script 130 - Corrigir formata√ß√£o de moeda nos formul√°rios
# Sistema Erlene Advogados - Corrigir convers√£o de R$ 12.821,20 para 12.82
# EXECUTAR DENTRO DA PASTA: frontend/

echo "üîß Script 130 - Corrigindo formata√ß√£o de moeda nos formul√°rios..."

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    echo "‚ùå Erro: Execute este script dentro da pasta frontend/"
    echo "üìÅ Comando correto:"
    echo "   cd frontend"
    echo "   chmod +x 130-fix-currency-format.sh && ./130-fix-currency-format.sh"
    exit 1
fi

echo "1Ô∏è‚É£ DIAGN√ìSTICO DO PROBLEMA:"
echo "   ‚Ä¢ R$ 12.821,20 est√° sendo enviado como 12.82 ‚ùå"
echo "   ‚Ä¢ R$ 25.000,00 est√° sendo enviado como 25.00 ‚ùå"
echo "   ‚Ä¢ Problema: formata√ß√£o brasileira n√£o est√° sendo convertida corretamente"
echo "   ‚Ä¢ Solu√ß√£o: corrigir fun√ß√£o de convers√£o moeda ‚Üí n√∫mero"

echo ""
echo "2Ô∏è‚É£ Analisando problema na formata√ß√£o..."

# Encontrar arquivos que usam formata√ß√£o de moeda
echo "Arquivos que usam formata√ß√£o de moeda:"
find src -name "*.js" -exec grep -l "formatCurrency\|handleCurrencyChange\|valor_causa" {} \;

echo ""
echo "3Ô∏è‚É£ Corrigindo NewProcess.js..."

# Backup do NewProcess.js
cp src/components/processes/NewProcess.js src/components/processes/NewProcess.js.backup.130

# Corrigir fun√ß√£o de formata√ß√£o no NewProcess.js
sed -i '/const formatCurrency = (value) => {/,/};/c\
  const formatCurrency = (value) => {\
    if (!value) return "";\
    \
    // Remove tudo exceto n√∫meros\
    const numbers = value.replace(/\D/g, "");\
    \
    if (!numbers) return "";\
    \
    // Converte para n√∫mero com 2 casas decimais\
    const amount = parseInt(numbers) / 100;\
    \
    return new Intl.NumberFormat("pt-BR", {\
      style: "currency",\
      currency: "BRL"\
    }).format(amount);\
  };\
\
  const handleCurrencyChange = (e) => {\
    const formatted = formatCurrency(e.target.value);\
    setFormData(prev => ({\
      ...prev,\
      valor_causa: formatted\
    }));\
  };\
\
  // Fun√ß√£o para converter moeda formatada para n√∫mero\
  const currencyToNumber = (currencyString) => {\
    if (!currencyString) return null;\
    \
    // Remove "R$", espa√ßos, pontos (milhares) e converte v√≠rgula para ponto\
    const numberStr = currencyString\
      .replace(/R\$\s?/g, "")\
      .replace(/\./g, "")\
      .replace(/,/g, ".");\
    \
    const number = parseFloat(numberStr);\
    return isNaN(number) ? null : number;\
  };' src/components/processes/NewProcess.js

# Corrigir parte do submit no NewProcess.js
sed -i '/valor_causa: formData.valor_causa ?/,/null,/c\
        valor_causa: currencyToNumber(formData.valor_causa),' src/components/processes/NewProcess.js

echo "4Ô∏è‚É£ Corrigindo EditProcess.js..."

# Backup do EditProcess.js
cp src/components/processes/EditProcess.js src/components/processes/EditProcess.js.backup.130

# Corrigir fun√ß√£o de formata√ß√£o no EditProcess.js
sed -i '/const formatCurrency = (value) => {/,/};/c\
  const formatCurrency = (value) => {\
    if (!value) return "";\
    \
    // Remove tudo exceto n√∫meros\
    const numbers = value.replace(/\D/g, "");\
    \
    if (!numbers) return "";\
    \
    // Converte para n√∫mero com 2 casas decimais\
    const amount = parseInt(numbers) / 100;\
    \
    return new Intl.NumberFormat("pt-BR", {\
      style: "currency",\
      currency: "BRL"\
    }).format(amount);\
  };\
\
  const handleCurrencyChange = (e) => {\
    const formatted = formatCurrency(e.target.value);\
    setFormData(prev => ({\
      ...prev,\
      valor_causa: formatted\
    }));\
  };\
\
  // Fun√ß√£o para converter moeda formatada para n√∫mero\
  const currencyToNumber = (currencyString) => {\
    if (!currencyString) return null;\
    \
    // Remove "R$", espa√ßos, pontos (milhares) e converte v√≠rgula para ponto\
    const numberStr = currencyString\
      .replace(/R\$\s?/g, "")\
      .replace(/\./g, "")\
      .replace(/,/g, ".");\
    \
    const number = parseFloat(numberStr);\
    return isNaN(number) ? null : number;\
  };' src/components/processes/EditProcess.js

# Corrigir parte do submit no EditProcess.js
sed -i '/valor_causa: formData.valor_causa ?/,/null,/c\
        valor_causa: currencyToNumber(formData.valor_causa),' src/components/processes/EditProcess.js

# Corrigir carregamento inicial de dados no EditProcess.js
sed -i '/valor_causa: process.valor_causa ? formatCurrency(process.valor_causa.toString()) : "",/c\
            valor_causa: process.valor_causa ? formatBrazilianCurrency(process.valor_causa) : "",' src/components/processes/EditProcess.js

# Adicionar fun√ß√£o para formatar valor vindo do backend
sed -i '/const currencyToNumber = (currencyString) => {/i\
  // Fun√ß√£o para formatar valor vindo do backend (n√∫mero) para moeda brasileira\
  const formatBrazilianCurrency = (value) => {\
    if (!value || value === 0) return "";\
    \
    const number = parseFloat(value);\
    if (isNaN(number)) return "";\
    \
    return new Intl.NumberFormat("pt-BR", {\
      style: "currency",\
      currency: "BRL"\
    }).format(number);\
  };\
' src/components/processes/EditProcess.js

echo ""
echo "5Ô∏è‚É£ Criando arquivo de teste para validar formata√ß√£o..."

cat > test-currency-format.js << 'EOF'
// Teste da formata√ß√£o de moeda

// Fun√ß√£o corrigida
const currencyToNumber = (currencyString) => {
  if (!currencyString) return null;
  
  // Remove "R$", espa√ßos, pontos (milhares) e converte v√≠rgula para ponto
  const numberStr = currencyString
    .replace(/R\$\s?/g, "")
    .replace(/\./g, "")
    .replace(/,/g, ".");
  
  const number = parseFloat(numberStr);
  return isNaN(number) ? null : number;
};

// Testes
console.log("=== TESTES DE FORMATA√á√ÉO ===");
console.log("R$ 12.821,20 ‚Üí", currencyToNumber("R$ 12.821,20")); // Deve ser 12821.20
console.log("R$ 25.000,00 ‚Üí", currencyToNumber("R$ 25.000,00")); // Deve ser 25000.00
console.log("R$ 1.234.567,89 ‚Üí", currencyToNumber("R$ 1.234.567,89")); // Deve ser 1234567.89
console.log("R$ 100,50 ‚Üí", currencyToNumber("R$ 100,50")); // Deve ser 100.50
console.log("R$ 0,99 ‚Üí", currencyToNumber("R$ 0,99")); // Deve ser 0.99

// Fun√ß√£o para formatar valor do backend
const formatBrazilianCurrency = (value) => {
  if (!value || value === 0) return "";
  
  const number = parseFloat(value);
  if (isNaN(number)) return "";
  
  return new Intl.NumberFormat("pt-BR", {
    style: "currency",
    currency: "BRL"
  }).format(number);
};

console.log("\n=== TESTES DE FORMATA√á√ÉO BACKEND ===");
console.log("12823.00 ‚Üí", formatBrazilianCurrency("12823.00")); // Deve ser R$ 12.823,00
console.log("25000.00 ‚Üí", formatBrazilianCurrency("25000.00")); // Deve ser R$ 25.000,00
console.log("100.50 ‚Üí", formatBrazilianCurrency("100.50")); // Deve ser R$ 100,50
EOF

echo "Executando teste de formata√ß√£o..."
node test-currency-format.js
rm test-currency-format.js

echo ""
echo "6Ô∏è‚É£ Verificando se corre√ß√µes foram aplicadas..."

# Verificar se fun√ß√µes foram corrigidas
if grep -q "currencyToNumber" src/components/processes/NewProcess.js && \
   grep -q "currencyToNumber" src/components/processes/EditProcess.js; then
    echo "‚úÖ Fun√ß√£o currencyToNumber adicionada aos dois arquivos"
else
    echo "‚ùå Erro ao adicionar fun√ß√£o currencyToNumber"
    exit 1
fi

if grep -q "formatBrazilianCurrency" src/components/processes/EditProcess.js; then
    echo "‚úÖ Fun√ß√£o formatBrazilianCurrency adicionada ao EditProcess"
else
    echo "‚ùå Erro ao adicionar fun√ß√£o formatBrazilianCurrency"
    exit 1
fi

echo ""
echo "‚úÖ SCRIPT 130 CONCLU√çDO COM SUCESSO!"
echo ""
echo "üîß PROBLEMAS CORRIGIDOS:"
echo "   ‚ùå Problema anterior: R$ 12.821,20 ‚Üí 12.82 (ERRADO)"
echo "   ‚úÖ Corre√ß√£o atual: R$ 12.821,20 ‚Üí 12821.20 (CORRETO)"
echo ""
echo "   ‚ùå Problema anterior: R$ 25.000,00 ‚Üí 25.00 (ERRADO)"
echo "   ‚úÖ Corre√ß√£o atual: R$ 25.000,00 ‚Üí 25000.00 (CORRETO)"
echo ""
echo "üîß FUN√á√ïES IMPLEMENTADAS:"
echo "   ‚úÖ currencyToNumber() - converte moeda BR para n√∫mero"
echo "   ‚úÖ formatBrazilianCurrency() - formata n√∫mero do backend"
echo "   ‚úÖ formatCurrency() - formata√ß√£o durante digita√ß√£o"
echo "   ‚úÖ handleCurrencyChange() - handler do input"
echo ""
echo "üìã ARQUIVOS CORRIGIDOS:"
echo "   ‚úÖ src/components/processes/NewProcess.js"
echo "   ‚úÖ src/components/processes/EditProcess.js"
echo ""
echo "üß™ TESTE AGORA:"
echo "   1. Reinicie o servidor React (Ctrl+C e npm start)"
echo "   2. Teste digitar: R$ 12.821,20"
echo "   3. Verifique se salva como 12821.20 no banco"
echo "   4. Teste editar um processo existente"
echo "   5. Verifique se o valor aparece formatado corretamente"
echo ""
echo "üí° EXPLICA√á√ÉO DO PROBLEMA:"
echo "   ‚Ä¢ O problema estava na convers√£o de string BR para n√∫mero"
echo "   ‚Ä¢ R$ 12.821,20 tem ponto como separador de milhares"
echo "   ‚Ä¢ E v√≠rgula como separador decimal"
echo "   ‚Ä¢ A fun√ß√£o anterior n√£o tratava isso corretamente"
echo "   ‚Ä¢ Agora remove pontos (milhares) e converte v√≠rgula em ponto"