#!/bin/bash

# Script 147 - Corrigir integra√ß√£o de autentica√ß√£o do audienciasService
# Sistema Erlene Advogados - Usar mesmo sistema de auth dos m√≥dulos funcionais
# Data: $(date +%Y-%m-%d)
# EXECUTE DENTRO DA PASTA: frontend/

echo "üîß Script 147 - Corrigindo autentica√ß√£o do m√≥dulo audi√™ncias..."

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    echo "‚ùå Erro: Execute este script dentro da pasta frontend/"
    exit 1
fi

echo "üîç PROBLEMA IDENTIFICADO:"
echo "   ‚ùå Tanto GET quanto POST retornam 401 Unauthorized"
echo "   ‚ùå audienciasService usa sistema de auth diferente dos outros m√≥dulos"
echo "   ‚úÖ Token JWT v√°lido existe no localStorage"
echo ""

echo "1Ô∏è‚É£ Fazendo backup do audienciasService atual..."

if [ -f "src/services/audienciasService.js" ]; then
    cp "src/services/audienciasService.js" "src/services/audienciasService.js.bak.147"
    echo "‚úÖ Backup criado: audienciasService.js.bak.147"
else
    echo "‚ùå audienciasService.js n√£o encontrado"
    exit 1
fi

echo ""
echo "2Ô∏è‚É£ Analisando api.js para usar mesmo sistema..."

if [ -f "src/services/api.js" ]; then
    echo "‚úÖ api.js encontrado - ser√° usado como base"
    
    echo "üìã Verificando m√©todo de autentica√ß√£o do api.js:"
    grep -n -A5 "getToken\|Authorization" src/services/api.js | head -10
else
    echo "‚ùå api.js n√£o encontrado"
    exit 1
fi

echo ""
echo "3Ô∏è‚É£ Substituindo audienciasService para usar api.js..."

# Criar novo audienciasService que usa api.js
cat > src/services/audienciasService.js << 'EOF'
// audienciasService.js - Integrado com api.js (Sistema funcionando)
// Sistema Erlene Advogados - M√≥dulo Audi√™ncias
// Usa o mesmo sistema de autentica√ß√£o dos m√≥dulos funcionais

import apiInstance from './api';

class AudienciasService {
  constructor() {
    this.api = apiInstance;
  }

  // ====== M√âTODOS DE LISTAGEM ======
  
  async listarAudiencias() {
    try {
      const response = await this.api.apiRequest('/admin/audiencias');
      
      return {
        success: true,
        audiencias: response.data || response || [],
        message: 'Audi√™ncias carregadas com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao listar audi√™ncias:', error);
      return {
        success: false,
        audiencias: [],
        error: error.message || 'Erro ao carregar audi√™ncias'
      };
    }
  }

  async obterAudiencia(id) {
    try {
      const response = await this.api.apiRequest(`/admin/audiencias/${id}`);
      
      return {
        success: true,
        audiencia: response.data || response,
        message: 'Audi√™ncia carregada com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao obter audi√™ncia:', error);
      return {
        success: false,
        audiencia: null,
        error: error.message || 'Erro ao carregar audi√™ncia'
      };
    }
  }

  // ====== M√âTODOS DE CRIA√á√ÉO ======
  
  async criarAudiencia(dadosAudiencia) {
    try {
      const response = await this.api.apiRequest('/admin/audiencias', {
        method: 'POST',
        body: JSON.stringify(dadosAudiencia)
      });
      
      return {
        success: true,
        audiencia: response.data || response,
        message: response.message || 'Audi√™ncia criada com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao criar audi√™ncia:', error);
      return {
        success: false,
        audiencia: null,
        error: error.message || 'Erro ao criar audi√™ncia'
      };
    }
  }

  // ====== M√âTODOS DE ATUALIZA√á√ÉO ======
  
  async atualizarAudiencia(id, dadosAudiencia) {
    try {
      const response = await this.api.apiRequest(`/admin/audiencias/${id}`, {
        method: 'PUT',
        body: JSON.stringify(dadosAudiencia)
      });
      
      return {
        success: true,
        audiencia: response.data || response,
        message: response.message || 'Audi√™ncia atualizada com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao atualizar audi√™ncia:', error);
      return {
        success: false,
        audiencia: null,
        error: error.message || 'Erro ao atualizar audi√™ncia'
      };
    }
  }

  // ====== M√âTODOS DE EXCLUS√ÉO ======
  
  async excluirAudiencia(id) {
    try {
      const response = await this.api.apiRequest(`/admin/audiencias/${id}`, {
        method: 'DELETE'
      });
      
      return {
        success: true,
        message: response.message || 'Audi√™ncia exclu√≠da com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao excluir audi√™ncia:', error);
      return {
        success: false,
        error: error.message || 'Erro ao excluir audi√™ncia'
      };
    }
  }

  // ====== M√âTODOS DE ESTAT√çSTICAS ======
  
  async obterEstatisticas() {
    try {
      const response = await this.api.apiRequest('/admin/audiencias/dashboard/stats');
      
      return {
        success: true,
        stats: response.data || response,
        message: 'Estat√≠sticas carregadas com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas:', error);
      return {
        success: false,
        stats: {
          hoje: 0,
          proximasSemana: 0,
          total: 0,
          realizadas: 0
        },
        error: error.message || 'Erro ao carregar estat√≠sticas'
      };
    }
  }

  // ====== M√âTODOS DE FILTROS ======
  
  async obterAudienciasHoje() {
    try {
      const response = await this.api.apiRequest('/admin/audiencias/filters/hoje');
      
      return {
        success: true,
        audiencias: response.data || response || [],
        message: 'Audi√™ncias de hoje carregadas'
      };
    } catch (error) {
      console.error('‚ùå Erro ao obter audi√™ncias de hoje:', error);
      return {
        success: false,
        audiencias: [],
        error: error.message
      };
    }
  }

  async obterProximasAudiencias() {
    try {
      const response = await this.api.apiRequest('/admin/audiencias/filters/proximas');
      
      return {
        success: true,
        audiencias: response.data || response || [],
        message: 'Pr√≥ximas audi√™ncias carregadas'
      };
    } catch (error) {
      console.error('‚ùå Erro ao obter pr√≥ximas audi√™ncias:', error);
      return {
        success: false,
        audiencias: [],
        error: error.message
      };
    }
  }

  // ====== M√âTODOS DE VALIDA√á√ÉO E FORMATA√á√ÉO ======
  
  validarDadosAudiencia(dados) {
    const erros = [];
    
    if (!dados.processo_id) erros.push('Processo √© obrigat√≥rio');
    if (!dados.cliente_id) erros.push('Cliente √© obrigat√≥rio');
    if (!dados.tipo) erros.push('Tipo de audi√™ncia √© obrigat√≥rio');
    if (!dados.data) erros.push('Data √© obrigat√≥ria');
    if (!dados.hora) erros.push('Hora √© obrigat√≥ria');
    if (!dados.local) erros.push('Local √© obrigat√≥rio');
    if (!dados.advogado) erros.push('Advogado respons√°vel √© obrigat√≥rio');
    
    return {
      valido: erros.length === 0,
      erros
    };
  }
  
  formatarDadosParaAPI(dados) {
    return {
      processo_id: parseInt(dados.processoId || dados.processo_id),
      cliente_id: parseInt(dados.clienteId || dados.cliente_id),
      tipo: dados.tipo,
      data: dados.data,
      hora: dados.hora,
      local: dados.local,
      sala: dados.sala || '',
      endereco: dados.endereco || '',
      advogado: dados.advogado,
      juiz: dados.juiz || '',
      status: dados.status || 'agendada',
      observacoes: dados.observacoes || ''
    };
  }

  // ====== M√âTODOS DE FORMATA√á√ÉO PARA EXIBI√á√ÉO ======
  
  formatarDataHora(data, hora) {
    if (!data) return '';
    
    const dataObj = new Date(data + 'T' + (hora || '00:00'));
    return dataObj.toLocaleString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }
  
  formatarTipoAudiencia(tipo) {
    const tipos = {
      'conciliacao': 'Concilia√ß√£o',
      'instrucao': 'Instru√ß√£o',
      'julgamento': 'Julgamento',
      'inicial': 'Audi√™ncia Inicial',
      'una': 'Audi√™ncia Una',
      'virtual': 'Virtual',
      'presencial': 'Presencial'
    };
    
    return tipos[tipo] || tipo;
  }
  
  formatarStatusAudiencia(status) {
    const statusMap = {
      'agendada': { label: 'Agendada', class: 'bg-blue-100 text-blue-800' },
      'confirmada': { label: 'Confirmada', class: 'bg-green-100 text-green-800' },
      'realizada': { label: 'Realizada', class: 'bg-gray-100 text-gray-800' },
      'cancelada': { label: 'Cancelada', class: 'bg-red-100 text-red-800' },
      'adiada': { label: 'Adiada', class: 'bg-yellow-100 text-yellow-800' }
    };
    
    return statusMap[status] || { label: status, class: 'bg-gray-100 text-gray-800' };
  }

  // ====== M√âTODOS DE UTILIDADE ======
  
  obterCorPorTipo(tipo) {
    const cores = {
      'conciliacao': 'bg-blue-500',
      'instrucao': 'bg-green-500',
      'julgamento': 'bg-red-500',
      'inicial': 'bg-purple-500',
      'una': 'bg-yellow-500',
      'virtual': 'bg-indigo-500',
      'presencial': 'bg-pink-500'
    };
    
    return cores[tipo] || 'bg-gray-500';
  }
  
  calcularTempoRestante(data, hora) {
    if (!data || !hora) return null;
    
    const agora = new Date();
    const dataAudiencia = new Date(data + 'T' + hora);
    const diff = dataAudiencia.getTime() - agora.getTime();
    
    if (diff < 0) return 'Expirado';
    
    const dias = Math.floor(diff / (1000 * 60 * 60 * 24));
    const horas = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    
    if (dias > 0) return `${dias} dia(s)`;
    if (horas > 0) return `${horas} hora(s)`;
    
    return 'Hoje';
  }
}

// Exportar inst√¢ncia √∫nica
export default new AudienciasService();
EOF

echo "‚úÖ Novo audienciasService criado com integra√ß√£o ao api.js!"

echo ""
echo "4Ô∏è‚É£ Verificando sintaxe do novo service..."

if node -c src/services/audienciasService.js 2>/dev/null; then
    echo "‚úÖ Sintaxe correta do novo audienciasService"
else
    echo "‚ùå Erro de sintaxe no novo audienciasService"
    node -c src/services/audienciasService.js
    echo "Restaurando backup..."
    cp "src/services/audienciasService.js.bak.147" "src/services/audienciasService.js"
    exit 1
fi

echo ""
echo "5Ô∏è‚É£ Testando nova integra√ß√£o de autentica√ß√£o..."

echo "üìã Criando script de teste para o console do navegador..."

cat > test_new_audiencias_auth.js << 'EOF'
// Teste da nova integra√ß√£o audienciasService
console.log('=== TESTE NOVA INTEGRA√á√ÉO AUDI√äNCIAS ===');

// Verificar se audienciasService foi recarregado
if (typeof audienciasService !== 'undefined') {
    console.log('Service local encontrado, testando...');
} else {
    console.log('Recarregue a p√°gina para carregar novo service');
}

// Testar diretamente via fetch usando mesmo m√©todo do api.js
const testNewAuth = async () => {
    // Buscar token como api.js faz
    const possibleKeys = ['token', 'auth_token', 'access_token', 'jwt_token', 'erlene_token'];
    let token = null;
    
    for (const key of possibleKeys) {
        const foundToken = localStorage.getItem(key);
        if (foundToken) {
            console.log(`Token encontrado na chave: ${key}`);
            token = foundToken;
            break;
        }
    }
    
    if (!token) {
        console.log('‚ùå Nenhum token encontrado');
        return;
    }
    
    console.log('üîë Token a ser usado:', token.substring(0, 50) + '...');
    
    // Testar GET com m√©todo do api.js
    try {
        const response = await fetch('http://localhost:8000/api/admin/audiencias', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });
        
        console.log('‚úÖ GET Status:', response.status);
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ GET Success - Dados:', data);
        } else {
            const error = await response.text();
            console.log('‚ùå GET Error:', error);
        }
    } catch (error) {
        console.error('üí• GET Exception:', error);
    }
    
    // Testar POST com m√©todo do api.js
    try {
        const response = await fetch('http://localhost:8000/api/admin/audiencias', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
                processo_id: 1,
                cliente_id: 1,
                tipo: 'conciliacao',
                data: '2025-09-17',
                hora: '14:00',
                local: 'Teste Nova Auth',
                advogado: 'Dr. Teste'
            })
        });
        
        console.log('‚úÖ POST Status:', response.status);
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ POST Success - Dados:', data);
        } else {
            const error = await response.text();
            console.log('‚ùå POST Error:', error);
        }
    } catch (error) {
        console.error('üí• POST Exception:', error);
    }
};

testNewAuth();
EOF

echo "üìã Execute test_new_audiencias_auth.js no console ap√≥s recarregar a p√°gina"

echo ""
echo "6Ô∏è‚É£ Verificando se outras depend√™ncias est√£o corretas..."

echo "üìã Verificando imports nos componentes..."

# Verificar se os componentes ainda importam audienciasService corretamente
if grep -q "import audienciasService" src/pages/admin/Audiencias.js; then
    echo "‚úÖ Audiencias.js - import correto"
else
    echo "‚ùå Audiencias.js - import n√£o encontrado"
fi

if grep -q "import audienciasService" src/components/audiencias/NewAudiencia.js; then
    echo "‚úÖ NewAudiencia.js - import correto"
else
    echo "‚ùå NewAudiencia.js - import n√£o encontrado"
fi

if grep -q "import audienciasService" src/components/audiencias/EditAudiencia.js; then
    echo "‚úÖ EditAudiencia.js - import correto"
else
    echo "‚ùå EditAudiencia.js - import n√£o encontrado"
fi

echo ""
echo "‚úÖ Script 147 conclu√≠do!"
echo ""
echo "üîß CORRE√á√ïES REALIZADAS:"
echo "   ‚úÖ audienciasService reescrito para usar api.js"
echo "   ‚úÖ Mesmo sistema de autentica√ß√£o dos m√≥dulos funcionais"
echo "   ‚úÖ M√©todos adaptados para apiRequest() do api.js"
echo "   ‚úÖ Mantidas todas as funcionalidades existentes"
echo ""
echo "üß™ TESTE AGORA:"
echo "   1. Recarregue a p√°gina (F5 ou Ctrl+R)"
echo "   2. Execute test_new_audiencias_auth.js no console"
echo "   3. Teste acesso a /admin/audiencias"
echo "   4. Teste cria√ß√£o de nova audi√™ncia"
echo ""
echo "üìã PR√ìXIMO SCRIPT (se ainda houver erro):"
echo "   148-debug-backend-audiencias-auth.sh"
echo "   Objetivo: Verificar configura√ß√£o de auth no backend"
echo ""
echo "üîÑ Se funcionar:"
echo "   149-finalize-audiencias-integration.sh"
echo "   Objetivo: Finalizar integra√ß√£o e remover dados mock"