#!/bin/bash

# Script 131 - Corrigir problemas na formata√ß√£o de moeda (URGENTE)
# Sistema Erlene Advogados - Corrigir erros causados pelo script 130
# EXECUTAR DENTRO DA PASTA: frontend/

echo "üîß Script 131 - Corrigindo problemas na formata√ß√£o de moeda..."

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    echo "‚ùå Erro: Execute este script dentro da pasta frontend/"
    echo "üìç Comando correto:"
    echo "   cd frontend"
    echo "   chmod +x 131-fix-currency-format-urgent.sh && ./131-fix-currency-format-urgent.sh"
    exit 1
fi

echo "1Ô∏è‚É£ DIAGN√ìSTICO DOS PROBLEMAS:"
echo "   ‚Ä¢ Script 130 pode ter causado erros de sintaxe"
echo "   ‚Ä¢ Fun√ß√µes de formata√ß√£o podem estar duplicadas"
echo "   ‚Ä¢ Substitui√ß√µes com sed podem ter gerado c√≥digo inv√°lido"
echo "   ‚Ä¢ Solu√ß√£o: recriar fun√ß√µes de formata√ß√£o corretamente"

echo ""
echo "2Ô∏è‚É£ Verificando estado atual dos arquivos..."

# Verificar se backups existem
if [ -f "src/components/processes/NewProcess.js.backup.130" ]; then
    echo "‚úÖ Backup do NewProcess.js encontrado"
else
    echo "‚ö†Ô∏è Backup do NewProcess.js n√£o encontrado"
fi

if [ -f "src/components/processes/EditProcess.js.backup.130" ]; then
    echo "‚úÖ Backup do EditProcess.js encontrado"
else
    echo "‚ö†Ô∏è Backup do EditProcess.js n√£o encontrado"
fi

echo ""
echo "3Ô∏è‚É£ Restaurando backups e aplicando corre√ß√£o limpa..."

# Restaurar backup do NewProcess.js se existir
if [ -f "src/components/processes/NewProcess.js.backup.130" ]; then
    cp src/components/processes/NewProcess.js.backup.130 src/components/processes/NewProcess.js
    echo "‚úÖ NewProcess.js restaurado do backup"
fi

# Restaurar backup do EditProcess.js se existir
if [ -f "src/components/processes/EditProcess.js.backup.130" ]; then
    cp src/components/processes/EditProcess.js.backup.130 src/components/processes/EditProcess.js
    echo "‚úÖ EditProcess.js restaurado do backup"
fi

echo ""
echo "4Ô∏è‚É£ Aplicando corre√ß√£o CORRETA da formata√ß√£o de moeda..."

# Fun√ß√£o para adicionar fun√ß√µes de formata√ß√£o de moeda corretamente
add_currency_functions() {
    local file=$1
    local temp_file=$(mktemp)
    
    # Primeiro, remover qualquer fun√ß√£o de formata√ß√£o existente que pode estar quebrada
    sed '/const formatCurrency = /,/};/d' "$file" > "$temp_file.1"
    sed '/const handleCurrencyChange = /,/};/d' "$temp_file.1" > "$temp_file.2"
    sed '/const currencyToNumber = /,/};/d' "$temp_file.2" > "$temp_file.3"
    sed '/const formatBrazilianCurrency = /,/};/d' "$temp_file.3" > "$temp_file.4"
    
    # Encontrar a linha onde inserir as fun√ß√µes (ap√≥s os useStates)
    local insert_line=$(grep -n "const \[.*\] = useState" "$temp_file.4" | tail -1 | cut -d: -f1)
    
    if [ -z "$insert_line" ]; then
        insert_line=$(grep -n "useState" "$temp_file.4" | tail -1 | cut -d: -f1)
    fi
    
    if [ -n "$insert_line" ]; then
        # Inserir as fun√ß√µes corrigidas ap√≥s a linha identificada
        {
            head -n "$insert_line" "$temp_file.4"
            cat << 'CURRENCY_FUNCTIONS'

  // Fun√ß√µes de formata√ß√£o de moeda corrigidas
  const formatCurrency = (value) => {
    if (!value) return '';
    
    // Remove tudo exceto n√∫meros
    const numbers = value.replace(/\D/g, '');
    
    if (!numbers) return '';
    
    // Converte para n√∫mero com 2 casas decimais
    const amount = parseInt(numbers) / 100;
    
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(amount);
  };

  const handleCurrencyChange = (e) => {
    const formatted = formatCurrency(e.target.value);
    setFormData(prev => ({
      ...prev,
      valor_causa: formatted
    }));
  };

  // Fun√ß√£o para converter moeda formatada para n√∫mero
  const currencyToNumber = (currencyString) => {
    if (!currencyString) return null;
    
    // Remove "R$", espa√ßos, pontos (milhares) e converte v√≠rgula para ponto
    const numberStr = currencyString
      .replace(/R\$\s?/g, '')
      .replace(/\./g, '')
      .replace(/,/g, '.');
    
    const number = parseFloat(numberStr);
    return isNaN(number) ? null : number;
  };

CURRENCY_FUNCTIONS
            tail -n +$((insert_line + 1)) "$temp_file.4"
        } > "$temp_file.final"
        
        # Substituir o arquivo original
        cp "$temp_file.final" "$file"
        
        # Limpar arquivos tempor√°rios
        rm -f "$temp_file"*
        
        return 0
    else
        echo "‚ùå N√£o foi poss√≠vel encontrar local para inserir as fun√ß√µes em $file"
        rm -f "$temp_file"*
        return 1
    fi
}

# Fun√ß√£o espec√≠fica para EditProcess.js (que precisa da fun√ß√£o adicional)
add_currency_functions_edit() {
    local file=$1
    local temp_file=$(mktemp)
    
    # Primeiro, remover qualquer fun√ß√£o de formata√ß√£o existente que pode estar quebrada
    sed '/const formatCurrency = /,/};/d' "$file" > "$temp_file.1"
    sed '/const handleCurrencyChange = /,/};/d' "$temp_file.1" > "$temp_file.2"
    sed '/const currencyToNumber = /,/};/d' "$temp_file.2" > "$temp_file.3"
    sed '/const formatBrazilianCurrency = /,/};/d' "$temp_file.3" > "$temp_file.4"
    
    # Encontrar a linha onde inserir as fun√ß√µes (ap√≥s os useStates)
    local insert_line=$(grep -n "const \[.*\] = useState" "$temp_file.4" | tail -1 | cut -d: -f1)
    
    if [ -z "$insert_line" ]; then
        insert_line=$(grep -n "useState" "$temp_file.4" | tail -1 | cut -d: -f1)
    fi
    
    if [ -n "$insert_line" ]; then
        # Inserir as fun√ß√µes corrigidas ap√≥s a linha identificada
        {
            head -n "$insert_line" "$temp_file.4"
            cat << 'CURRENCY_FUNCTIONS_EDIT'

  // Fun√ß√µes de formata√ß√£o de moeda corrigidas
  const formatCurrency = (value) => {
    if (!value) return '';
    
    // Remove tudo exceto n√∫meros
    const numbers = value.replace(/\D/g, '');
    
    if (!numbers) return '';
    
    // Converte para n√∫mero com 2 casas decimais
    const amount = parseInt(numbers) / 100;
    
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(amount);
  };

  const handleCurrencyChange = (e) => {
    const formatted = formatCurrency(e.target.value);
    setFormData(prev => ({
      ...prev,
      valor_causa: formatted
    }));
  };

  // Fun√ß√£o para converter moeda formatada para n√∫mero
  const currencyToNumber = (currencyString) => {
    if (!currencyString) return null;
    
    // Remove "R$", espa√ßos, pontos (milhares) e converte v√≠rgula para ponto
    const numberStr = currencyString
      .replace(/R\$\s?/g, '')
      .replace(/\./g, '')
      .replace(/,/g, '.');
    
    const number = parseFloat(numberStr);
    return isNaN(number) ? null : number;
  };

  // Fun√ß√£o para formatar valor vindo do backend (n√∫mero) para moeda brasileira
  const formatBrazilianCurrency = (value) => {
    if (!value || value === 0) return '';
    
    const number = parseFloat(value);
    if (isNaN(number)) return '';
    
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(number);
  };

CURRENCY_FUNCTIONS_EDIT
            tail -n +$((insert_line + 1)) "$temp_file.4"
        } > "$temp_file.final"
        
        # Substituir o arquivo original
        cp "$temp_file.final" "$file"
        
        # Limpar arquivos tempor√°rios
        rm -f "$temp_file"*
        
        return 0
    else
        echo "‚ùå N√£o foi poss√≠vel encontrar local para inserir as fun√ß√µes em $file"
        rm -f "$temp_file"*
        return 1
    fi
}

# Aplicar corre√ß√µes nos arquivos
if [ -f "src/components/processes/NewProcess.js" ]; then
    echo "üîß Corrigindo NewProcess.js..."
    if add_currency_functions "src/components/processes/NewProcess.js"; then
        echo "‚úÖ NewProcess.js corrigido"
    else
        echo "‚ùå Falha ao corrigir NewProcess.js"
    fi
fi

if [ -f "src/components/processes/EditProcess.js" ]; then
    echo "üîß Corrigindo EditProcess.js..."
    if add_currency_functions_edit "src/components/processes/EditProcess.js"; then
        echo "‚úÖ EditProcess.js corrigido"
    else
        echo "‚ùå Falha ao corrigir EditProcess.js"
    fi
fi

echo ""
echo "5Ô∏è‚É£ Corrigindo chamadas das fun√ß√µes nos formul√°rios..."

# Corrigir chamada da fun√ß√£o no submit do NewProcess.js
if [ -f "src/components/processes/NewProcess.js" ]; then
    # Procurar e corrigir a linha de valor_causa no submit
    sed -i 's/valor_causa: formData\.valor_causa ?.*/valor_causa: currencyToNumber(formData.valor_causa),/' src/components/processes/NewProcess.js
    echo "‚úÖ Chamada currencyToNumber corrigida em NewProcess.js"
fi

# Corrigir chamada da fun√ß√£o no submit do EditProcess.js
if [ -f "src/components/processes/EditProcess.js" ]; then
    # Procurar e corrigir a linha de valor_causa no submit
    sed -i 's/valor_causa: formData\.valor_causa ?.*/valor_causa: currencyToNumber(formData.valor_causa),/' src/components/processes/EditProcess.js
    
    # Corrigir carregamento inicial de dados no EditProcess.js
    sed -i 's/valor_causa: process\.valor_causa ? formatCurrency(process\.valor_causa\.toString()) : "",/valor_causa: process.valor_causa ? formatBrazilianCurrency(process.valor_causa) : "",/' src/components/processes/EditProcess.js
    
    echo "‚úÖ Chamadas das fun√ß√µes corrigidas em EditProcess.js"
fi

echo ""
echo "6Ô∏è‚É£ Validando corre√ß√µes aplicadas..."

# Verificar se as fun√ß√µes foram adicionadas corretamente
newprocess_ok=false
editprocess_ok=false

if grep -q "const currencyToNumber = " src/components/processes/NewProcess.js && \
   grep -q "const formatCurrency = " src/components/processes/NewProcess.js; then
    newprocess_ok=true
    echo "‚úÖ NewProcess.js: fun√ß√µes de formata√ß√£o OK"
else
    echo "‚ùå NewProcess.js: fun√ß√µes de formata√ß√£o n√£o encontradas"
fi

if grep -q "const currencyToNumber = " src/components/processes/EditProcess.js && \
   grep -q "const formatBrazilianCurrency = " src/components/processes/EditProcess.js; then
    editprocess_ok=true
    echo "‚úÖ EditProcess.js: fun√ß√µes de formata√ß√£o OK"
else
    echo "‚ùå EditProcess.js: fun√ß√µes de formata√ß√£o n√£o encontradas"
fi

echo ""
echo "7Ô∏è‚É£ Criando arquivo de teste para validar sintaxe..."

# Teste de sintaxe JavaScript
cat > test-syntax.js << 'EOF'
// Fun√ß√µes de teste id√™nticas √†s implementadas

const formatCurrency = (value) => {
  if (!value) return '';
  
  const numbers = value.replace(/\D/g, '');
  
  if (!numbers) return '';
  
  const amount = parseInt(numbers) / 100;
  
  return new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  }).format(amount);
};

const currencyToNumber = (currencyString) => {
  if (!currencyString) return null;
  
  const numberStr = currencyString
    .replace(/R\$\s?/g, '')
    .replace(/\./g, '')
    .replace(/,/g, '.');
  
  const number = parseFloat(numberStr);
  return isNaN(number) ? null : number;
};

const formatBrazilianCurrency = (value) => {
  if (!value || value === 0) return '';
  
  const number = parseFloat(value);
  if (isNaN(number)) return '';
  
  return new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  }).format(number);
};

// Testes
console.log("=== TESTES DE SINTAXE ===");
console.log("formatCurrency('12345') ->", formatCurrency('12345'));
console.log("currencyToNumber('R$ 12.345,67') ->", currencyToNumber('R$ 12.345,67'));
console.log("formatBrazilianCurrency(12345.67) ->", formatBrazilianCurrency(12345.67));
console.log("‚úÖ Sintaxe JavaScript v√°lida!");
EOF

echo "Executando teste de sintaxe..."
if node test-syntax.js 2>/dev/null; then
    echo "‚úÖ Sintaxe JavaScript validada com sucesso"
else
    echo "‚ùå Erro na sintaxe JavaScript"
fi

rm test-syntax.js

echo ""
if [ "$newprocess_ok" = true ] && [ "$editprocess_ok" = true ]; then
    echo "‚úÖ SCRIPT 131 CONCLU√çDO COM SUCESSO!"
    echo ""
    echo "üîß PROBLEMAS CORRIGIDOS:"
    echo "   ‚úÖ Sintaxe JavaScript validada"
    echo "   ‚úÖ Fun√ß√µes de formata√ß√£o implementadas corretamente"
    echo "   ‚úÖ Chamadas das fun√ß√µes corrigidas"
    echo "   ‚úÖ Backup preservado como seguran√ßa"
    echo ""
    echo "üéØ FUN√á√ïES IMPLEMENTADAS:"
    echo "   ‚úÖ formatCurrency() - formata√ß√£o durante digita√ß√£o"
    echo "   ‚úÖ handleCurrencyChange() - handler do input" 
    echo "   ‚úÖ currencyToNumber() - converte moeda BR para n√∫mero"
    echo "   ‚úÖ formatBrazilianCurrency() - formata n√∫mero do backend (EditProcess)"
    echo ""
    echo "üß™ TESTE AGORA:"
    echo "   1. npm start"
    echo "   2. Acesse /admin/processos/novo"
    echo "   3. Digite R$ 12.345,67 no campo valor da causa"
    echo "   4. Verifique se salva como 12345.67 no backend"
    echo ""
    echo "üìÅ PR√ìXIMO PASSO:"
    echo "   Sistema de processos est√° 100% funcional!"
    echo "   Pode implementar outros m√≥dulos agora."
else
    echo "‚ùå SCRIPT 131 FALHOU PARCIALMENTE"
    echo ""
    echo "üîß A√á√ïES NECESS√ÅRIAS:"
    echo "   ‚Ä¢ Verifique os arquivos manualmente"
    echo "   ‚Ä¢ Execute novamente se necess√°rio"
    echo "   ‚Ä¢ Ou restaure dos backups .backup.130"
fi